[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mitch Henderson",
    "section": "",
    "text": "Sport üèÖ, data üíª, and science üë®‚Äçüî¨\nResume"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Exploring Catapult‚Äôs running imbalance data\n\n\n\n\n\nThis post shows how running symmetry data can be exported from Catapult Openfield, then imported and visualised in R.\n\n\n\n\n\n\nFeb 10, 2021\n\n\nMitch Henderson\n\n\n\n\n\n\n  \n\n\n\n\nVisualising Apple Health data |Guest post by Heidi Thornton\n\n\n\n\n\nTracking data from your Apple watch doesn‚Äôt have to stay in an app. This post shows you how it can be exported, manipulated, and visualised using R.\n\n\n\n\n\n\nMay 19, 2020\n\n\nHeidi Thornton\n\n\n\n\n\n\n  \n\n\n\n\nMaking better visualisations using ggplot2 in R\n\n\n\n\n\nGreat visualisations help communicate your message more clearly. This post shows you an example of my process.\n\n\n\n\n\n\nApr 22, 2020\n\n\nMitch Henderson\n\n\n\n\n\n\n  \n\n\n\n\nTidying Catapult 10Hz export data\n\n\n\n\n\nThe export format of Catapult‚Äôs 10Hz GPS data isn‚Äôt ideal for analysis. This post shows you how to tidy it using R.\n\n\n\n\n\n\nApr 5, 2020\n\n\nMitch Henderson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2020-04-22-how-a-sports-scientist-can-use-ggplot2-to-make-a-stunning-dataviz.html",
    "href": "posts/2020-04-22-how-a-sports-scientist-can-use-ggplot2-to-make-a-stunning-dataviz.html",
    "title": "Making better visualisations using ggplot2 in R",
    "section": "",
    "text": "‚ÄúThe ability to take data‚Äîto be able to understand it, to process it, to extract value from it, to visualize it, to communicate it‚Äîthat‚Äôs going to be a hugely important skill in the next decades, ‚Ä¶ because now we really do have essentially free and ubiquitous data. So the complimentary scarce factor is the ability to understand that data and extract value from it.‚Äù\n\n‚Äî Hal Varian, The McKinsey Quarterly, Jan 2009\n\n\nGreat results and important messages from sports scientists and S&C coaches are too often lost at the final and most important hurdle of the scientific process: communication.\nA clear, considered, and engaging visualisation helps by presenting the data in a way that‚Äôs digestible to people, not just machines.\nOn the 13th April 2020, I tweeted a thread of visualisations that I‚Äôd made recreating the work of Tom Worville of The Athletic.\n\n\nInspired by the work of @Worville showing @LFC‚Äôs age profile over the past few seasons, I tried to recreate his charts for some other competition-winning üèÜ teams over the last few years using #ggplot in #rstats. A thread.1/6 pic.twitter.com/F9m4oVbLG0\n\n‚Äî Mitch Henderson (@mitchhendo_) April 13, 2020\n\n\nThis post will take you through the process of how I generated this one:\n\nThe full code will be posted at the end, as throughout the post I‚Äôll be going through parts of it bit by bit.\nIf you‚Äôd prefer to watch me do it, this video shows me going through the whole process:\n\n\n\n\n\nStep 1 | Data prep\n\nCollate the data\nThe data that we will use needs to be in this format:\n\n\n\n\n \n  \n    player_name \n    percent_involvement \n    dob \n    arrival_at_team \n    reference_date \n  \n \n\n  \n    Andrej Kramaric \n    0.0070175 \n    19/06/1991 \n    16/01/2015 \n    15/05/2016 \n  \n  \n    Andy King \n    0.3105263 \n    29/10/1988 \n    1/07/2007 \n    15/05/2016 \n  \n  \n    Christian Fuchs \n    0.7926901 \n    7/04/1986 \n    1/07/2015 \n    15/05/2016 \n  \n  \n    Daniel Amartey \n    0.0304094 \n    21/12/1994 \n    22/01/2016 \n    15/05/2016 \n  \n  \n    Danny Drinkwater \n    0.8868421 \n    5/03/1990 \n    20/01/2012 \n    15/05/2016 \n  \n  \n    Danny Simpson \n    0.7631579 \n    4/01/1987 \n    30/08/2014 \n    15/05/2016 \n  \n  \n    Demarai Gray \n    0.0546784 \n    28/06/1996 \n    4/01/2016 \n    15/05/2016 \n  \n  \n    Gokhan Inler \n    0.0567251 \n    27/06/1984 \n    19/08/2015 \n    15/05/2016 \n  \n  \n    Jamie Vardy \n    0.9160819 \n    11/01/1987 \n    1/07/2012 \n    15/05/2016 \n  \n  \n    Jeffrey Schlupp \n    0.4055556 \n    23/12/1992 \n    1/07/2010 \n    15/05/2016 \n  \n  \n    Joe Dodoo \n    0.0058480 \n    29/06/1995 \n    1/08/2013 \n    15/05/2016 \n  \n  \n    Kasper Schmeichel \n    1.0000000 \n    5/11/1986 \n    1/07/2011 \n    15/05/2016 \n  \n  \n    Leonardo Ulloa \n    0.2877193 \n    26/07/1986 \n    22/07/2014 \n    15/05/2016 \n  \n  \n    Marc Albrighton \n    0.8038012 \n    18/11/1989 \n    1/07/2014 \n    15/05/2016 \n  \n  \n    Marcin Wasilewski \n    0.0885965 \n    9/06/1980 \n    17/09/2013 \n    15/05/2016 \n  \n  \n    Nathan Dyer \n    0.0643275 \n    29/11/1987 \n    1/09/2015 \n    15/05/2016 \n  \n  \n    N'Golo Kante \n    0.8836257 \n    29/03/1991 \n    3/08/2015 \n    15/05/2016 \n  \n  \n    Ritchie De Laet \n    0.1921053 \n    28/11/1988 \n    1/07/2012 \n    15/05/2016 \n  \n  \n    Riyad Mahrez \n    0.8871345 \n    21/02/1991 \n    11/01/2014 \n    15/05/2016 \n  \n  \n    Robert Huth \n    0.9210526 \n    18/08/1984 \n    1/07/2015 \n    15/05/2016 \n  \n  \n    Shinji Okazaki \n    0.6005848 \n    16/04/1986 \n    1/07/2015 \n    15/05/2016 \n  \n  \n    Wes Morgan \n    1.0000000 \n    21/01/1984 \n    30/01/2012 \n    15/05/2016 \n  \n  \n    Yohan Benalouane \n    0.0198830 \n    28/03/1987 \n    3/08/2015 \n    15/05/2016 \n  \n\n\n\n\n\n\n\nThe percent_involvement column is a 0 - 1 number representing the percentage of minutes played for the season.\nThe dob column is each players date of birth.\nThe arrival_at_team column is the date the player joined the club.\nThe reference_date column is the date that you want to calculate age and time at the club from. In this circumstance, I‚Äôve used the date of the last Premier League game of the 2015/16 season.\n\nI found Leicester City‚Äôs data from 2015/16 at transfermarkt.com.\nSave this file as a .csv in your working directory.\n\n\nFind a logo\nFind your team‚Äôs logo online (preferably high resolution .png image with a transparent background), and save it into your working directory. I found this one on Leicester City‚Äôs Wikipedia page.\n\n\n\n\n\n\n\nStep 2 | Load packages and import data\n\nR packages\nThe below packages need to be loaded at the beginning of your R script. If this is the first time using any of these packages on your computer, make sure you install them first (e.g.¬†install.packages(\"package_name\")).\nUsing different fonts in R can be tricky, particularly on Windows machines (like I use). If you want to use a non-standard font like I have and you‚Äôre unfamiliar with the setup, read this article by June Choe that walks you through it.\nLater in this post I‚Äôll be using a font called ‚ÄúURWGeometricW03-Light‚Äù that I had to download online, you‚Äôll need to substitute this in the code to a font available to you for the code to work (or aquire this font).\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(ggforce)\nlibrary(magick)\nlibrary(scales)\n\n\n\nAdd metadata\nThis is where we define what will end up being used for our title, subtitle, caption, and logo.\n\n# Metadata ---------------------------------------------------------------\n\n# Title, subtitle, and legend\nteam_name <- \"Leicester City\"\nshort_name <- \"Foxes\"\nleague <- \"English Premier League\"\nseason <- \"2015/16\"\n\n# Caption\ndata_source <- \"transfermarkt.com\"\nsocial_media_handle <- \"@mitchhendo_\"\n\n# Name of logo file within working directory\nlogo_file_name <- \"leicester_logo.png\"\n\n\n\nLoad data\nThis section will read in the data from my file called leicester_data.csv in my working directory, and make it an object called data. Then we tell R what kind of data certain columns are (number, date, character etc), and calculate a few new columns based on the data within the file.\nI‚Äôve added comments to the code so it‚Äôs easier to understand what each part is doing. Anything after a # is a comment which isn‚Äôt executed as code. Comments are used for explaining your code to others or yourself in the future.\n\n# Data import -------------------------------------------------------------\n\ndata <- read_csv('data_leicester.csv') %>% # Read in this file\n  mutate(\n    dob = dmy(dob),\n    # Recognise this column as a date\n    \n    reference_date = dmy(reference_date),\n    # Recognise this column as a date\n    \n    arrival_at_team = dmy(arrival_at_team),\n    # Recognise this column as a date\n    \n    age = (reference_date - dob) / 365,\n    # Create a new column that calculates each players age at the reference date\n    \n    age_at_arrival = (arrival_at_team - dob) / 365,\n    # Create a new column that calculates each players age at arrival to the club\n    \n    time_with_team = as_factor(ifelse(arrival_at_team < reference_date - 365, \"Years > 1\", \"Years < 1\"))\n    # Create a new column that determines whether a player has been at the club for longer than a year or not\n  )\n\n\n\n\n\nStep 3 | Create plot\n\nPrep\nBefore we create the ggplot object, we need to define a few things to make the plotting easier.\nFirstly, we define what colours we want for the dots and call this object year_colours (using hex code to specify colours), and also define a series of numbers that we‚Äôll call index which will allow us to plot the trailing lines behind the players (showing how long they‚Äôve been at the club for).\n\n# Colours of the dots\nyear_colours <- c(`Years > 1` = \"#25ABF8\", `Years < 1` = \"#CE3A6C\")\n\n# This vector is needed to draw the trailing lines showing how long a player has been at the club\n# Don't change this unless you know what you're doing\nindex <- c(0, 0.25, 0.5, 0.75, 1)\n\n\n\nPlotting\nNow the fun begins. Let‚Äôs start building the plot.\nWe‚Äôll start by using the ggplot function and telling it that the data we‚Äôre using is from the data object we created earlier. The aes() function is used to specify what parts of our data are going to be used in the plot, so we say the x-axis will be our age column and the y-axis will be our percent_involvement column.\n\nggplot(data = data, aes(x = age, y = percent_involvement))\n\n\n\n\nThis is essentially the canvas that we‚Äôll build from.\nNext we‚Äôll add our dots using the geom_point() function. The way the ggplot function works is by adding layers (called geoms) to the ‚Äúcanvas‚Äù. We add layers or aspects to the plot by adding them with a +.\nNote I‚Äôve added another column from our dataset to specify the colour in the aes() function for the geom_point() layer only. The data specified in the aes() function at the top is applied to all geoms below unless specified otherwise within the an individual geom. I‚Äôve also manually adjusted the size of the dots, which is done outside the aes().\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4)\n\n\n\n\nNext we‚Äôll add our title, subtitle, x-axis title, caption, and legend title using the labs() function. All of the information for these has been defined in Step 2 where we added the metadata.\nThe paste0() function essentially allows us to paste together objects we‚Äôve defined using code and written character strings to create a character string that dynamically changes based on different inputs (e.g.¬†paste0(team_name, \" | Squad Age Profile\") becomes ‚ÄúLeicester City | Squad Age Profile‚Äù). You can use the dynamic titles like I have, or you could simply write what you want each part to say within quotation marks like I did for the x-axis title.\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name))\n\n\n\n\nNext we‚Äôll fix up our y-axis by using the scale_y_continuous() function to give it a proper title, use percent scales, and tell it where to break up the axis ticks.\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1))\n\n\n\n\nThen we set our axis limits using the expand_limits(), and x-axis breaks using scale_x_continuous().\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_x_continuous(breaks = seq(16, 40, 4))\n\n\n\n\nWe can add our colours to the dots that we specified earlier by using scale_colour_manual() and specifying the values to be our object year_colours.\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours)\n\n\n\n\nOne of the most fun parts of using ggplot in my mind is playing around with the theme. There are a number of basic themes built into ggplot aswell as some more fun ones that can be added with packages like hrbrthemes, ggtech (which has themes to imitate AirBnb, Facebook, Google and Twitter‚Äôs style), and ggthemes (which has themes to imitate plots made by FiveThirtyEight, Wall Street Journal, and The Economist among others). The best page I‚Äôve found for exploring different themes and theme packages is Themes to improve your ggplot figures by rfortherestofus.com. You can also modify themes any way you‚Äôd like using the theme() function which we‚Äôll get to next.\nI‚Äôll use theme_minimal() as a base.\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal()\n\n\n\n\nYou can adjust any aspect of the theme manually with theme(). The flexibility and power of this is almost endless, and far beyond the scope of this post, but carefully look through all the arguments I‚Äôve written and you‚Äôll be able to understand a lot of it.\nRemember that you will likely need to change the font (the family argument within theme()) where mine says URWGeometricW03-Light to a font available to you (fonts can be tricky, this post will help).\nFeel free to play around with these to get a different look or to get a better understanding of what they‚Äôre doing. For example, you could change the colour of the plot area (i.e.¬†where the data goes) by changing the hex code in plot.background = element_rect(fill = \"#141622\").\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n\n\n\n\nNext we add the player name labels to the plot using geom_text_repel() from the ggrepel package we loaded earlier. It‚Äôs a handy function that basically ensures labels don‚Äôt overlap each other.\nThe order in which we add things from here starts to matter now. Like I mentioned earlier, becuase ggplot‚Äôs are built with layers, you need to think about what order you want them laid. I want the labels to be added on top of the dots, so I‚Äôll put this geom right after geom_point().\nAgain, in my code below, this geom uses the ‚ÄúURWGeometricW03-Light‚Äù font I got online. You‚Äôll need to download this font or change it to a font available to you.\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n\n\n\n\nThe plot is really starting to look like the finished product now.\nWe need to add the trailing white lines with the geom_link() function from the ggforce package we‚Äôve loaded. Again, the order is important here, we want the lines to be beneath the dots so we add this geom before geom_point().\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_link(aes(x = age_at_arrival,\n                xend = age,\n                yend = percent_involvement,\n                alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n\n\n\n\nNow we need to add the green Peak Years area and label. This is done with annotate() which manually adds things like shapes, text, or images. We‚Äôre adding a shape (rect for rectangle) and text, so we add 2 annotate() geoms before anything else (because we want them to be at the deepest layer), and provide it the coordinates so it knows where to put them.\nOnce again, change family if you don‚Äôt have the ‚ÄúURWGeometricW03-Light‚Äù font.\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  annotate(\"rect\", \n           xmin = 24,\n           xmax = 29,\n           ymin = -Inf,\n           ymax = 1,\n           alpha = 0.5,\n           fill = \"mediumseagreen\") +\n  annotate(\"text\", \n           x = 26.5, \n           y = 1.05, \n           label = \"Peak Years\", \n           colour = \"mediumseagreen\", \n           alpha = 0.7, \n           family = \"URWGeometricW03-Light\",\n           size = 5) +\n  geom_link(aes(x = age_at_arrival,\n                xend = age,\n                yend = percent_involvement,\n                alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n\n\n\n\n\n\n\n\nStep 4 | Saving and adding the logo\n\nSaving the plot\nTo save the plot as a high resolution image we can use the ggsave() function. Here I save the file with a dynamic name that equates to the current date, underscore, short_name (object we created in Step 2 = ‚ÄúFoxes‚Äù), underscore, peak-years.png. So for me, today as I write this post, the file would be saved as 2020-04-24_Foxes_peak-years.png, but that would be different if I was to save it on a different day or with a different short_name object.\nThe dpi argument is dots per inch and allows you to set the resolution. Higher is better but also means a larger file size (dpi = 600 is good).\nThe file will be saved into your working directory.\n\nggsave(paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), \n       height = 5.75,\n       width = 7.25,\n       dpi = 600)\n\n\n\nAdding the logo\nThere‚Äôs a number of ways to add a logo to a ggplot object, but they can be quite complex. The best one I‚Äôve found is using a custom function that Thomas Mock created and posted on his blog.\nIt reads in the plot as a .png image, the logo as another .png image, and puts the logo in a corner you specify at a size you specify.\nThe only parts of this you may want to modify are the sections below ### ONLY MODIFY FROM HERE DOWN. You can choose which corner you want the logo in, what is the file name you saved the plot image, and the size of the logo (bigger number = smaller logo).\n\n# Add logo function -------------------------------------------------------\n\nadd_logo <- function(plot_path, logo_path, logo_position, logo_scale = 10){\n  \n  # Requires magick R Package https://github.com/ropensci/magick\n  \n  # Useful error message for logo position\n  if (!logo_position %in% c(\"top right\", \"top left\", \"bottom right\", \"bottom left\")) {\n    stop(\"Error Message: Uh oh! Logo Position not recognized\\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'\")\n  }\n  \n  # read in raw images\n  plot <- magick::image_read(plot_path)\n  logo_raw <- magick::image_read(logo_path)\n  \n  # get dimensions of plot for scaling\n  plot_height <- magick::image_info(plot)$height\n  plot_width <- magick::image_info(plot)$width\n  \n  # default scale to 1/10th width of plot\n  # Can change with logo_scale\n  logo <- magick::image_scale(logo_raw, as.character(plot_width/logo_scale))\n  \n  # Get width of logo\n  logo_width <- magick::image_info(logo)$width\n  logo_height <- magick::image_info(logo)$height\n  \n  # Set position of logo\n  # Position starts at 0,0 at top left\n  # Using 0.01 for 1% - aesthetic padding\n  \n  if (logo_position == \"top right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"top left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"bottom right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = plot_height - logo_height - 0.02 * plot_height\n  } else if (logo_position == \"bottom left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.02 * plot_height\n  }\n  \n  # Compose the actual overlay\n  magick::image_composite(plot, logo, offset = paste0(\"+\", x_pos, \"+\", y_pos))\n  \n}\n\n\n### ONLY MODIFY FROM HERE DOWN\n\n# Choose logo, position, and size (bigger number = smaller logo) ----------\n\nplot_with_logo <- add_logo(\n  plot_path = paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), # url or local file for the plot\n  logo_path = logo_file_name, # url or local file for the logo\n  logo_position = \"top right\", # choose a corner\n  # 'top left', 'top right', 'bottom left' or 'bottom right'\n  logo_scale = 7\n)\n\n# save the image and write to working directory\nmagick::image_write(plot_with_logo, paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"))\n\nThis‚Äôll save over the file we created with a new file that‚Äôs the plot image with the logo added like this:\n\nAnd that‚Äôs it! Let me know if you have any questions or want me to clarify anything.\nKeep up to date with anything new from me on my Twitter.\nCheers,\nMitch\nFull code:\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(ggforce)\nlibrary(magick)\nlibrary(scales)\n\n\n# Metadata ---------------------------------------------------------------\n\n# Title, subtitle, and legend\nteam_name <- \"Leicester City\"\nshort_name <- \"Foxes\"\nleague <- \"English Premier League\"\nseason <- \"2015/16\"\n\n# Caption\ndata_source <- \"transfermarkt.com\"\nsocial_media_handle <- \"@mitchhendo_\"\n\n# Name of logo file within working directory\nlogo_file_name <- \"leicester_logo.png\"\n\n\n\n# Data import -------------------------------------------------------------\n\ndata <- read_csv('data_leicester.csv') %>% # Read in this file\n  mutate(\n    dob = dmy(dob),\n    # Recognise this column as a date\n    \n    reference_date = dmy(reference_date),\n    # Recognise this column as a date\n    \n    arrival_at_team = dmy(arrival_at_team),\n    # Recognise this column as a date\n    \n    age = (reference_date - dob) / 365,\n    # Create a new column that calculates each players age at the reference date\n    \n    age_at_arrival = (arrival_at_team - dob) / 365,\n    # Create a new column that calculates each players age at arrival to the club\n    \n    time_with_team = as_factor(ifelse(arrival_at_team < reference_date - 365, \"Years > 1\", \"Years < 1\"))\n    # Create a new column that determines whether a player has been at the club for longer than a year or not\n  )\n\n\n# Visualise ---------------------------------------------------------------\n\n# Colours of the dots\nyear_colours <- c(`Years > 1` = \"#25ABF8\", `Years < 1` = \"#CE3A6C\")\n\n# This vector is needed to draw the trailing lines showing how long a player has been at the club\n# Don't change this unless you know what you're doing\nindex <- c(0, 0.25, 0.5, 0.75, 1)\n\n\n# Construct plot\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  annotate(\"rect\", xmin = 24, xmax = 29, ymin = -Inf, ymax = 1, alpha = 0.5, fill = \"mediumseagreen\") +\n  annotate(\"text\", \n           x = 26.5, \n           y = 1.05, \n           label = \"Peak Years\", \n           colour = \"mediumseagreen\", \n           alpha = 0.7, \n           family = \"URWGeometricW03-Light\",\n           size = 5) +\n  geom_link(aes(x = age_at_arrival, xend = age, yend = percent_involvement, alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_x_continuous(breaks = seq(16, 40, 4)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14)) +\n  ggsave(paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"),  dpi = 600)\n\n\n\n\n\n# Add logo function -------------------------------------------------------\n\nadd_logo <- function(plot_path, logo_path, logo_position, logo_scale = 10){\n  \n  # Requires magick R Package https://github.com/ropensci/magick\n  \n  # Useful error message for logo position\n  if (!logo_position %in% c(\"top right\", \"top left\", \"bottom right\", \"bottom left\")) {\n    stop(\"Error Message: Uh oh! Logo Position not recognized\\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'\")\n  }\n  \n  # read in raw images\n  plot <- magick::image_read(plot_path)\n  logo_raw <- magick::image_read(logo_path)\n  \n  # get dimensions of plot for scaling\n  plot_height <- magick::image_info(plot)$height\n  plot_width <- magick::image_info(plot)$width\n  \n  # default scale to 1/10th width of plot\n  # Can change with logo_scale\n  logo <- magick::image_scale(logo_raw, as.character(plot_width/logo_scale))\n  \n  # Get width of logo\n  logo_width <- magick::image_info(logo)$width\n  logo_height <- magick::image_info(logo)$height\n  \n  # Set position of logo\n  # Position starts at 0,0 at top left\n  # Using 0.01 for 1% - aesthetic padding\n  \n  if (logo_position == \"top right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"top left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"bottom right\") {\n    x_pos = plot_width - logo_width - 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.01 * plot_height\n  } else if (logo_position == \"bottom left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.01 * plot_height\n  }\n  \n  # Compose the actual overlay\n  magick::image_composite(plot, logo, offset = paste0(\"+\", x_pos, \"+\", y_pos))\n  \n}\n\n\n\n# Choose logo, position, and size (bigger number = smaller logo) ----------\n\nplot_with_logo <- add_logo(\n  plot_path = paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), # url or local file for the plot\n  logo_path = logo_file_name, # url or local file for the logo\n  logo_position = \"top right\", # choose a corner\n  # 'top left', 'top right', 'bottom left' or 'bottom right'\n  logo_scale = 7\n)\n\n# save the image and write to working directory\nmagick::image_write(plot_with_logo, paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"))"
  },
  {
    "objectID": "posts/2020-04-05_Tidy-Catapult-10Hz.html",
    "href": "posts/2020-04-05_Tidy-Catapult-10Hz.html",
    "title": "Tidying Catapult 10Hz export data",
    "section": "",
    "text": "The export format of Catapult‚Äôs 10Hz GPS data isn‚Äôt ideal for analysis. This post shows you how to tidy it using R."
  },
  {
    "objectID": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-1",
    "href": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-1",
    "title": "Tidying Catapult 10Hz export data",
    "section": "Step 1",
    "text": "Step 1\nCreate a folder that will contain all your folders of Openfield 10Hz exports. Name this anything you like.\nThis folder will need to be in your working directory when you run the code below. If you aren‚Äôt familiar with a working directory, it is just a file path on your computer that sets the default location of any files you read into R, or save out of R. Think of it like a ‚Äúhome‚Äù folder and you refer to all files relative to this (you can check what it‚Äôs currently set to by running getwd(). I recommend using RStudio Projects to make this process much smoother.\nIn my code below I‚Äôve assigned the variable folder_name to be ‚Äúcombine‚Äù (the name of my folder that I will save the export files). You will need to change the folder_name variable to the folder that will contain your export files."
  },
  {
    "objectID": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-2",
    "href": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-2",
    "title": "Tidying Catapult 10Hz export data",
    "section": "Step 2",
    "text": "Step 2\nExport the files you‚Äôd like to combine from Openfield without changing their filename and save them in the folder discussed in Step 1.\nSome examples could be ‚ÄúRound 1‚Äù if you‚Äôre combining all your athletes exports from a round 1 match."
  },
  {
    "objectID": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-3",
    "href": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-3",
    "title": "Tidying Catapult 10Hz export data",
    "section": "Step 3",
    "text": "Step 3\nMake sure you have R and RStudio downloaded and installed on your machine (both free!).\nOpen RStudio, copy and paste the code below into a script (you can create a new R script by clicking the symbol directly under ‚ÄòFile‚Äô on the top-left of the window, and selecting ‚ÄòR Script‚Äô).\nSave the file as a .R file with an appropriate name (e.g.¬†‚Äútidy_catapult_data.R‚Äù).\n\n# Script to combine and tidy multiple Catapult Openfield 10Hz export .csv files by Mitch Henderson\n\nlibrary(tidyverse)\nlibrary(zoo)\n\n# This must exactly match the folder name containing the .csv files and be in your working directory\n\nfolder_name <- \"combine\"\n\n# This function will read in multiple .csv files, create a column with the file name, and parse it into it's relevant components.\n\nread_plus <- function(flnm) {\n  read_csv(flnm, skip = 8) |>\n    mutate(Filename = flnm,\n           without_folder = str_split(Filename, \"/\")[[1]][2],\n           Activity = str_split(without_folder, \" Export\")[[1]][1],\n           Player_interim = str_split(without_folder, \" for \")[[1]][2],\n           Player = paste0(\n             str_split(Player_interim, \" \")[[1]][1],\n             \" \",\n             str_split(Player_interim, \" \")[[1]][2]\n             )\n           ) |>\n  select(-Filename,\n         -Player_interim,\n         -without_folder)\n}\n\n# Import all files contained within the folder specified by `folder_name` above\n\ncombine_and_tidy <-\n  list.files(path = paste0(folder_name, \"/\"),\n             pattern = \"*.csv\", \n             full.names = T) |>\n  map_df(~read_plus(.))\n\n# Output csv into working directory\n\nwrite.csv(combine_and_tidy, file = paste0(folder_name, \"_tidy.csv\"), row.names = F)"
  },
  {
    "objectID": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-4",
    "href": "posts/2020-04-05_Tidy-Catapult-10Hz.html#step-4",
    "title": "Tidying Catapult 10Hz export data",
    "section": "Step 4",
    "text": "Step 4\nChange the folder_name variable to the exact folder name (in double quotes like is currently in the code) containing the .csv files you would like to combine and tidy.\nHighlight the entire code and press Ctrl + Enter on PC or Cmd + Return on a Mac. This will run the code and produce the output .csv file in your working directory."
  },
  {
    "objectID": "posts/2020-05-19_heidi-post.html",
    "href": "posts/2020-05-19_heidi-post.html",
    "title": "Visualising Apple Health data |Guest post by Heidi Thornton",
    "section": "",
    "text": "As sports scientists during the COVID-19 shutdown, we have limited ways of determining adherence to training programs (completed within govenment guidelines of course!).\nData from smart watches provide practitioners with basic measures that can be used as a rough guide to quantify training over this period (when using the more sophisticated technologies isn‚Äôt possible).\nAlthough the reliability and validity data of these devices aren‚Äôt widely available, they provide basic metrics such as total distance, duration, heart rate, and energy burnt etc.\nIn this post I‚Äôll run through how to:\nYou can find presentation slides covering all content and the full code at the end of the post."
  },
  {
    "objectID": "posts/2020-05-19_heidi-post.html#step-1",
    "href": "posts/2020-05-19_heidi-post.html#step-1",
    "title": "Visualising Apple Health data |Guest post by Heidi Thornton",
    "section": "Step 1",
    "text": "Step 1\nOpen the Apple Health app on your phone, then summary page at the top right, then tap the circle showing the first letter of your first name on the top right (left figure above)."
  },
  {
    "objectID": "posts/2020-05-19_heidi-post.html#step-2",
    "href": "posts/2020-05-19_heidi-post.html#step-2",
    "title": "Visualising Apple Health data |Guest post by Heidi Thornton",
    "section": "Step 2",
    "text": "Step 2\nSlide down and tap ‚ÄòExport All Health Data‚Äô (middle figure)."
  },
  {
    "objectID": "posts/2020-05-19_heidi-post.html#step-3",
    "href": "posts/2020-05-19_heidi-post.html#step-3",
    "title": "Visualising Apple Health data |Guest post by Heidi Thornton",
    "section": "Step 3",
    "text": "Step 3\nThe export takes up to a few minutes, then a page to email or message it will pop up. Email this file to yourself and download it.\nIf you don‚Äôt have an Apple watch and want to use my data, you can download my .xml file here."
  },
  {
    "objectID": "posts/2021-02-04-exploring-catapults-running-symmetry-data.html",
    "href": "posts/2021-02-04-exploring-catapults-running-symmetry-data.html",
    "title": "Exploring Catapult‚Äôs running imbalance data",
    "section": "",
    "text": "An interesting metric available in the Catapult system is running imbalance.\nCatapult‚Äôs Openfield software offers running symmetry metrics that try to quantify the load imbalance between the right and left leg when running. Detailed information about the running symmetry metrics and how to set them up is available in the Catapult Support documentation.\nThe documentation claims the practical applications of running symmetry metrics include:\n\nRehabilitation - See changes over time as the athlete improves during the process of rehabilitation\nReturn to Play - Use Running Symmetry as an objective return to play marker\nAthlete Screening - Use Running Symmetry on a weekly basis to identify changes in running mechanics\n\nRunning imbalance (%), arguably the most general running symmetry metric, is defined by Catapult as:\n\n‚ÄúAverage percentage load difference between left and right legs, across all Running Symmetry Series/Efforts. A negative running imbalance % is indicative of an x% additional load on the left side (where x is the running imbalance value). A positive running imbalance % is indicative of an x% additional load on the right side (where x is the running imbalance value).‚Äù\n\nWhilst I do have concerns about some of the measurement properties of this metric and don‚Äôt currently use it in practice for these reasons, I wanted to explore the data and see what it‚Äôs telling me. This post will show you how to export the data from Openfield Cloud, and visualise it using R and RStudio.\n\nThe full un-separated code is available at the end of this post for anyone looking to copy it into their script.\n\nStep 1 | Export from Openfield Cloud\nFirst thing to do is follow the steps outlined in the Catapult Support documentation to set up running symmetry metrics.\nFor a reason beyond my knowledge, when you perform a bulk export from Openfield Cloud with ‚ÄòAll Parameters‚Äô selected (when choosing a parameter group), you get an inconsistent number of columns in the .csv exports (if anyone knows why this might be, I‚Äôm interested to know!). This causes issues when we try to import and join the data into one data frame (i.e.¬†table of data) in R.\nTo remedy this, we need to create a parameter group to lock the columns that we want in our exports (ensuring a consistent export format).\n\nCreate a parameter group\nAfter logging into Openfield Cloud, press Settings\n\nSelect Parameters in the sidebar, then Parameter Groups in the top bar.\n\nNow we need to Add new.\n\nWe can give the group we‚Äôre creating a name (I‚Äôm calling mine ‚ÄúImbalance‚Äù) and select the metrics we‚Äôre interested in (I‚Äôm only selecting ‚ÄúDate‚Äù and ‚ÄúRunning Imbalance‚Äù). Then we click the orange Add Parameter Group at the bottom of the window to save our new group.\n\n\n\nSelect sessions to export\nThe Activities bar on the left of screen can be used to select multiple sessions that we‚Äôre interested in exporting data for. Using the click buttons on the right on the bar, we can select one or more years, months, days, or activities to export (I‚Äôve selected all of 2021 below).\n\nWhen more than one activity is selected, a green Bulk Export CTRs button will become available in the top right of screen (also showing how many activities have been selected). Click on it.\n\nThis will bring up a window allowing us to select some options for our exports. The only things we need to do is select our newly created parameter group (I‚Äôm selecting ‚ÄúImbalance‚Äù below) and enter the email you‚Äôd like the links for the exports to go to. Then select Export Bulk CTR.\n\n\n\nDownload exports\nYou‚Äôll then shortly receive one or more emails (depending on how many activities, and therefore data, you‚Äôre exporting) from Openfield Web with links to download .zip folders containing the exports.\n\n\n\n\nStep 2 | Import into RStudio\nSave all of your exports (keep them in .csv format) in a folder within your working directory (you can check your working directory in R or RStudio by running getwd() and you can change it with setwd(), but I‚Äôd recommend creating a project so it‚Äôs set for you). I‚Äôve called my folder ‚ÄúExports‚Äù.\n\nLoad packages\nOpen RStudio, and create a new R script (I recommend saving it with an appropriate name straight away).\nBelow are the packages we‚Äôll need for this process. I‚Äôve already installed them, so I‚Äôm only loading them here (and have commented out the installation commands at the top), but if you haven‚Äôt previously installed them then you‚Äôll need to delete the hashtags at the beginning of the lines and run the top parts first (only needs to be done once). The install might take a while (minutes, not hours), and you might need to follow some prompts in the R console (bottom left window of RStudio) for the process to fully complete.\nNote that I‚Äôm using a Windows computer (hence the device = \"win\" component of the code). I believe R works much better with fonts on Macs and this part of that line isn‚Äôt required (extrafont::loadfonts() should work, I‚Äôm interested to know if anyone reading is using a Mac).\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggtext)\nlibrary(here)\n\n\n\nImport files\nNow, assuming you have a folder of your exports in your working directory (I have all mine in a folder called ‚ÄúExports‚Äù), we can use a combination of the read_csv() and list.files() functions to:\n\nImport all files within your folder that include .csv in their filename into RStudio at once\nSkip the first 9 lines (which is metadata we don‚Äôt need)\nJoin them all together and call this data frame ‚Äúdata‚Äù\nFilter away any period-level data so only activity-level rows remains (i.e.¬†session totals)\n\nWe‚Äôll also select() only the Date, Player Name, and Running Imbalance columns (all others are discarded), and use mutate() with dmy() to tell R that our Date variable should be in a date format.\n\ndata <-\n  list.files(path = here(\"Exports\"),\n             pattern = \"*.csv\", \n             full.names = T) %>%\n  map_df(~read_csv(., skip = 9)) %>%\n  filter(`Period Name` == \"Session\") %>% \n  select(`Date`,\n         `Player Name`,\n         `Running Imbalance`) %>%\n  mutate(Date = dmy(Date))\n\nFor everyone following along that uses the Catapult system and can access their team‚Äôs data, the code above is what‚Äôs required to import all your data into R. For those that just want to follow along with some dummy data in the same format, you can click here to download my example .csv file.\nFor privacy reasons, I‚Äôll continue the tutorial using the dummy data contained in my .csv file. Note that all code from Step 3 onwards works on data imported either way (i.e.¬†from either your own Openfield exports (method above) or my example .csv (method below)).\nThe import for the .csv file is much simpler:\n\ndata <- read_csv(\"example_running_imbalance_data.csv\") %>%\n  mutate(Date = dmy(Date))\n\nThe first 6 rows of data (251 rows, 3 columns in total) look like this:\n\n\n\n\n \n  \n    Date \n    Player Name \n    Running Imbalance \n  \n \n\n  \n    2020-07-06 \n    Player Q \n    0.94264 \n  \n  \n    2020-07-06 \n    Player Q \n    -1.23166 \n  \n  \n    2020-07-07 \n    Player Q \n    0.87172 \n  \n  \n    2020-07-10 \n    Player Q \n    -0.88351 \n  \n  \n    2020-07-13 \n    Player Q \n    -0.90294 \n  \n  \n    2020-07-13 \n    Player Q \n    -0.24748 \n  \n\n\n\n\n\n\n\n\nStep 3 | Visualise using {ggplot2}\nIt‚Äôs beyond the scope of this post to go into full details of what each part of this ggplot2 code is doing (I have done this for a previous post where I built a more sophisticated chart step-by-step for those interested).\nIn an attempt to avoid telling you all to just ‚Äúdraw the rest of the damn owl‚Äù, I‚Äôll heavily comment my code so the purpose of all major functions are clear (context for the owl meme reference).\n\n\n# Create an object called min_date representing the minimum value in my `Date` column\n# Same thing for max_date with maximum value\n\nmin_date <- min(data$Date)\nmax_date <- max(data$Date)\n\n# We're taking the object called `data` and creating a ggplot with `Date` on the x-axis and\n# `Running Imbalance` on the y-axis\n\ndata %>%\n  ggplot(aes(x = Date, y = `Running Imbalance`)) +\n  \n# Put a coloured rectangle that spans the width of the plot, and from -5% to 5% on the y-axis. \n  \n  annotate(\"rect\", \n           xmin = min_date, xmax = max_date, ymin = -5, ymax = 5, \n           alpha = .1, fill = \"#3A86FF\") +\n  \n# Create a text string that says \"Left / Right side bias\" with an arrow in the specified location.  \n  annotate(\"text\", x = min_date + 8.5, y = -7.5, \n           label = paste0(\"Left side bias \", sprintf('\\u2193')), \n           size = 3.5, colour = \"grey45\", family = \"Segoe UI\") +\n  \n  annotate(\"text\", x = min_date + 9.25, y = 8, \n           label = paste0(\"Right side bias \", sprintf('\\u2191')), \n           size = 3.5, colour = \"grey45\", family = \"Segoe UI\") +\n  \n# Facet the chart so each player in the `Player Name` column will have their own chart\n  \n  facet_wrap(~`Player Name`) +\n  \n# Create a horizontal line through the middle of each chart \n  \n  geom_hline(yintercept = 0, size = 1) +\n  \n# Add dots that represent each data point\n  \n  geom_point() +\n  \n# Add a smoothed conditional mean line through the data points to aid the eye in seeing patterns.\n  \n  geom_smooth(se = F, size = 2, colour = \"#F72585\") +\n  \n# Remove x axis title; add chart title, subtitle, caption, and y-axis title\n# Note the {ggtext} package allows us to use a little HTML to get coloured text!\n  \n  labs(x = NULL, y = \"**Running Imbalance (%)**\", \n       title = \"Running symmetry metrics can be used to monitor changes in running mechanics\", \n       subtitle = \"Session running imbalance **values** and \n       <span style = 'color:#F72585;'>**trends**</span> \n       in relation to <span style = 'color:#3A86FF;'>**normal variation**</span>\n     between players\",\n       caption = \"Data: Catapult Vector GPS Units\") +\n  \n# Give the chart a particular look using themes and theme options.\n# I've removed unnecessary parts, changed the font, and made some parts bold.\n  \n  theme_minimal() +\n  theme(text = element_text(family = \"Segoe UI\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.title.y = element_markdown(size = 12),\n        strip.text = element_markdown(face = \"bold\"),\n        axis.text.x = element_blank(),\n        plot.title = element_markdown(face = \"bold\", size = 18),\n        plot.subtitle = element_markdown(size = 14)) +\n  \n# Save the output in our working directory.  \n  \n  ggsave(\"left_vs_right.png\", width = 10.7, height = 5.75)\n\n\nAnd that‚Äôs it! Let me know if you have any questions or want me to clarify anything. Very interested to hear your ideas about running symmetry / imbalance data and how it can be best visualised / presented.\nIf the interest is there, I can do a video walkthrough of this process (similar to my others on constructing a ggplot and tidying data).\nKeep up to date with anything new from me on my Twitter.\n\nCheers,\nMitch\n\nThumbnail from Catapult\nFull code:\n\n# Load packages -----------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggtext)\nlibrary(here)\n\n# Import ------------------------------------------------------------------\n\n# Full import method using your own exports from Openfield ‚Üì\n\ndata <-\n  list.files(path = here(\"Exports\"),\n             pattern = \"*.csv\", \n             full.names = T) %>%\n  map_df(~read_csv(., skip = 9)) %>%\n  filter(`Period Name` == \"Session\") %>% \n  select(`Date`,\n         `Player Name`,\n         `Running Imbalance`) %>%\n  mutate(Date = dmy(Date))\n\n# Import method using my `.csv` file that can be downloaded on my post ‚Üì\n\ndata <- read_csv(\"example_running_imbalance_data.csv\") %>%\n  mutate(Date = dmy(Date))\n\n# Visualise -------------------------------------------------------------------\n\nmin_date <- min(data$Date)\nmax_date <- max(data$Date)\n\n\ndata %>%\n  ggplot(aes(x = Date, y = `Running Imbalance`)) +\n  annotate(\"rect\", \n           xmin = min_date, xmax = max_date, ymin = -5, ymax = 5, \n           alpha = .1, fill = \"#3A86FF\") +\n  annotate(\"text\", x = min_date + 8.5, y = -7.5, \n           label = paste0(\"Left side bias \", sprintf('\\u2193')), \n           size = 3.5, colour = \"grey45\", family = \"Segoe UI\") +\n  annotate(\"text\", x = min_date + 9.25, y = 8, \n           label = paste0(\"Right side bias \", sprintf('\\u2191')), \n           size = 3.5, colour = \"grey45\", family = \"Segoe UI\") +\n  facet_wrap(~`Player Name`) +\n  geom_hline(yintercept = 0, size = 1) +\n  geom_point() +\n  geom_smooth(se = F, size = 2, colour = \"#F72585\") +\n  labs(x = NULL, y = \"**Running Imbalance (%)**\", \n       title = \"Running symmetry metrics can be used to monitor changes in running mechanics\", \n       subtitle = \"Session running imbalance **values** and \n       <span style = 'color:#F72585;'>**trends**</span> \n       in relation to <span style = 'color:#3A86FF;'>**normal variation**</span>\n     between players\",\n       caption = \"Data: Catapult Vector GPS Units\") +\n  theme_minimal() +\n  theme(text = element_text(family = \"Segoe UI\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.title.y = element_markdown(size = 12),\n        strip.text = element_markdown(face = \"bold\"),\n        axis.text.x = element_blank(),\n        plot.title = element_markdown(face = \"bold\", size = 18),\n        plot.subtitle = element_markdown(size = 14)) +\n  ggsave(\"left_vs_right.png\", width = 10.7, height = 5.75)"
  }
]