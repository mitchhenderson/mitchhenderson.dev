---
title: "How many wins do NRL teams need to make the finals?"
description: |
  It depends, but we can get a pretty good idea with monte carlo simulations
author: Mitch Henderson
date: 2025-01-18
draft: true
format: 
  code-fold: true
  code-tools: true
---

It's pretty common for sports teams to set themselves a goal at the start of a season to make the finals/playoffs . Teams in the NRL[^1] are no different. The flaw in this goal though, is that the number of wins needed to qualify for the finals varies from season-to-season depending on the results of other teams. A 13-win season (from 24 games) is enough to qualify some years, but not enough in others. So how many wins do teams need to be confident they'll qualify?

[^1]: National Rugby League

```{r}
#| output: false

# Setup
library(tidyverse)
library(furrr)
library(parallel)
library(igraph)
library(ggdist)
library(data.table)
library(ggtext)
library(gt)

colours <- c("#E31937", "#134A8E")

socials <- mitchhenderson::social_caption(icon_colour = "dodgerblue")

theme_set(theme_minimal() +
            theme(text = element_text(family = "Myriad Pro"),
                  plot.caption = element_markdown(),
                  plot.title = element_markdown(size = 18),
                  plot.subtitle = element_markdown(),
                  plot.title.position = "plot",
                  panel.grid.minor = element_blank()))
```

To explore this, I scraped 10 seasons of match result data from Wikipedia (excluding the shortened 2020 season) and saved the results in a file.

```{r}
#| output: false

# Import match results for 10 seasons (up to 2024)
import <- read_csv("https://raw.githubusercontent.com/mitchhenderson/mitchhenderson.dev/refs/heads/main/posts/_2025-01-18-how-many-wins-do-nrl-teams-need-to-make-the-finals/2014-2024_nrl_match_results.csv")
```

```{r}
DT::datatable(import)
```

I then calculated the points differential for each match and created binary (0 or 1) indicator columns for the winning/losing team and draws. I could then use this match level data to calculate the competition ladder at the end of the season, for each year in the data set.

```{r}
data <- import |>
  mutate(points_differential = home_score - away_score,
         home_win = if_else(points_differential > 0, 1, 0),
         away_win = if_else(points_differential < 0, 1, 0),
         draw = if_else(points_differential == 0, 1, 0))

# Calculate final competition ladder for each season -------------------

league_tables <- function(df){
  df <- df |>
    summarise(home_wins = sum(home_win),
              home_for_and_against = sum(points_differential),
              .by = c(season, home)) |>
    left_join(df |> 
                summarise(away_wins = sum(away_win),
                          away_for_and_against = sum(points_differential) * -1,
                          .by = c(season, away)),
              by = join_by(season, home == away)) |>
    left_join(df |> 
                summarise(draw = sum(draw), 
                          .by = c(season, home)),
              by = join_by(season, home)) |>
    mutate(total_wins = home_wins + away_wins + draw * 0.5,
           for_and_against = home_for_and_against + away_for_and_against) |>
    select(season, team = home, total_wins, for_and_against) |>
    arrange(season, -total_wins, -for_and_against) |>
    mutate(regular_season_position = row_number(),
           made_finals = if_else(regular_season_position <= 8, 1, 0),
           .by = season)
}

observed_summary_results <- league_tables(data)

DT::datatable(observed_summary_results)
```

This can then be visualised as a dot plot. Notice how one team won 10 games and made the finals (blue circle at the top of the 10 wins column) and another team won 13 games but didn't qualify (red circle at the bottom of the 13 wins column).

```{r}
observed_summary_results |>
  mutate(made_finals = factor(made_finals)) |>
  arrange(made_finals) |>
  ggplot(aes(x = total_wins, fill = made_finals, colour = made_finals)) +
  geom_dotsinterval(group = NA) +
  annotate("segment", 
           x = 1.5, 
           xend = 1.5, 
           y = 0.075, 
           yend = 0.5,
           linewidth = 0.2,
           colour = "grey60") +
  geom_richtext(data = tibble(y = 0.5, 
                              x = 1.5,
                              label = glue::glue("**2016 Newcastle Knights**<br>1 win, 1 draw")),
                aes(x, y, label = label),
                family = "Myriad Pro",
                hjust = 0, 
                vjust = 1, 
                fill = NA, 
                label.color = NA, 
                size = 3, 
                colour = "grey40") +
  annotate("segment", 
           x = 21, 
           xend = 21, 
           y = 0.135, 
           yend = 0.5,
           linewidth = 0.2,
           colour = "grey60") +
  geom_richtext(data = tibble(y = 0.5, 
                              x = 21,
                              label = glue::glue("**2021 Melbourne Storm<br>& Penrith Panthers**<br>Both with 21 wins")),
                aes(x, y, label = label),
                family = "Myriad Pro",
                hjust = 0, 
                vjust = 1, 
                fill = NA, 
                label.color = NA, 
                size = 3, 
                colour = "grey40") +
  labs(x = "Matches won",
       title = "**NRL teams have needed as low as 10 and as high as 14 wins to make<br>the finals over the last 10 years**",
       subtitle = glue::glue("Each circle is one team's season that either <span style='color: {colours[1]}; font-size:12pt'>**didn't make the finals**</span> or <span style='color: {colours[2]}; font-size:12pt'>**made the finals**</span>. 
                             <br>Teams with the same number of wins are stacked on top of each other."),
       caption = socials) +
  scale_x_continuous(limits = c(1.5, 23.5),
                     breaks = seq(1, 24, 1)) +
  scale_y_continuous(limits = c(0, 1),
                     expand = expansion(mult = c(0, 0.05))) +
  scale_fill_manual(values = colours) +
  scale_colour_manual(values = colours) +
  theme(legend.position = "none",
        axis.line.x = element_line(colour = "grey20"),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank())
```

There are thoretically a few ways to go about getting a probability for making the finals based on a given number of wins.

### Analytically specify the probability

If this is possible, god knows I don't know how to do it. Given the complexity of the competition structure with all its dependencies and constraints, specifying the true mathematical probability would be an extremely high-dimensional optimisation problem. Even if it is possible, it would require a very sophisticated and computationally intensive solution.[^2]

[^2]: If anyone knows if / how this can be done, let me know!

### Simply calculate the proportion of teams that qualified given each win total from the data set

This is not a good idea. With 17 teams and each of them playing 24 games in a season, the number of ways a season could play out to determine the final competition ladder is astronomically large. We only have 10 seasons worth of data, a tiny fraction of all the possible combinations of win-loss records and finals standings to use for our calculation. The true probability of making the finals can't be estimated with acceptable accuracy based on such a small sample of data. As an example, the data we have shows no teams with 11 wins qualifying for the finals (out of 8 times a team has won 11 games in our data). Does that mean the probability of qualifying is 0%? No. This is just noise (i.e. random variability) that we happen to have observed in our sample. Evidence of this is that a team with only 10 wins qualified.

### Fitting a linear model to the data

This is also not a good idea. On the surface, a logistic regression model sounds okay given we're trying to estimate the probability of a binary outcome (making the finals or not), but the assumptions baked into these models aren't a great fit for this problem. Statistical models need to make assumptions so the complexity of the world can be simplified into something quantifiable and useful. In the case of generalised linear models like logistic regression, one of those assumptions is a linear relationship between the predictors and the transfomed outcome. As a result, the model assigns non-zero probabilities for making the finals to win-loss records that are mathematically impossible for a team to qualify. These simpler statistical models that rely on assumptions to fit smooth curves through data don't have awareness of the competition constraints (like for one team to win, the other has to lose) to generate valid and accurate probability estimates.

### Monte Carlo simulation

These are a class of methods that basically use randomness to solve problems. They allow us to skip most of the hard maths and use computer simulation to get practically the same answers that could very painfully have been calculated analytically anyway. The idea is that we define a data generating process that mimics the way that data is generated in the real world, and then let the power of computers generate a huge amount of data. This lets us explore tens or hundreds of thousand (or more) of possible season outcomes to give us a more stable estimate of the probability of making the finals for each win-loss record. This is especially important for edge cases and unusual season results that are unlikely to have occurred in a small sample of historical data like ours. The beauty is that we can build in all the dependencies and constraints of the competition structure so we know the simulated data generated will adhere to it. It will capture the non-linear and threshold effects that exist as a result of the competition format. With enough simulated seasons, we can simply count the proportion of teams that qualify for a given number of wins to estimate the probability. The law of large numbers tells us this converges to the true probability.

```{r}
average_10yr_points_diff <- data |>
  pull(points_differential) |> 
  mean()

data |>
  ggplot(aes(x = points_differential)) +
  geom_histogram(binwidth = 1, colour = "white", fill = colours[2]) +
  labs(y = "Number of games", x = "Points differential",
       title = "**Most games end with an even  points differential**",
       subtitle = "This makes sense given tries (4) and goals (2) are by far the most common ways to score points",
       caption = socials) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  annotate("segment", 
           y = 0, 
           yend = 105, 
           x = average_10yr_points_diff, 
           xend = average_10yr_points_diff, 
           linetype = "dashed",
           colour = "grey50") +
  geom_richtext(data = tibble(y = 100, 
                              x = average_10yr_points_diff,
                              label = glue::glue("**{scales::number(average_10yr_points_diff, accuracy = 0.1)} points**<br>Home team advantage over past 10 years<br>(i.e. average points differential)")),
                aes(x, y, label = label),
                hjust = 0, fill = NA, label.color = NA, size = 2.5, colour = "grey40") +
  theme(panel.grid.major.x = element_blank(),
        axis.line.x = element_line(colour = "grey20"))
```
