---
title: "Modelling try scoring ability without the influence of team strength"
description: |
  
author: Mitch Henderson
date: 2025-03-04
draft: true
format: 
  html: 
    code-fold: true
    code-tools: true
    html-table-processing: none
knitr:
    opts_chunk: 
      dev: "ragg_png"
---

```{r}
# Finals issues?
# Why did paper use GPs and not us?

library(tidyverse)
library(arrow)
library(brms)
library(janitor)
```

```{r}
match_info <- map(
  list.files("match_information/", full.names = T), 
  read_parquet
  ) |>
  bind_rows()

player_list <- map(
  list.files("player_list/", full.names = T), 
  read_parquet
  ) |>
  bind_rows()

player_stats <- map(
  list.files("player_stats/", full.names = T), 
  read_parquet
  ) |>
  bind_rows()
```

```{r}
calculate_prematch_differential <- function(df) {
  
  # Step 1: Create separate records for home and away teams
  home_points <- df |>
    select(season, matchId, teamId = homeTeamId, pointsScored = homeFinalScore, 
           pointsConceded = awayFinalScore) |>
    mutate(isHome = TRUE)
  
  away_points <- df |>
    select(season, matchId, teamId = awayTeamId, pointsScored = awayFinalScore, 
           pointsConceded = homeFinalScore) |>
    mutate(isHome = FALSE)
  
  # Step 2: Combine and sort by season and matchId
  all_points <- bind_rows(home_points, away_points) |>
    arrange(season, matchId)
  
  # Step 3: Calculate running totals by team within each season
  team_running_totals <- all_points |>
    mutate(
      cumulative_scored = lag(cumsum(pointsScored), default = 0),
      cumulative_conceded = lag(cumsum(pointsConceded), default = 0),
      pre_match_differential = cumulative_scored - cumulative_conceded,
      .by = c(season, teamId)
    )
  
  # Step 4: Split back into home and away records
  home_results <- team_running_totals |>
    filter(isHome) |>
    select(season, 
           matchId, 
           homeTeamId = teamId, 
           home_pre_match_differential = pre_match_differential)
  
  away_results <- team_running_totals |>
    filter(!isHome) |>
    select(season, 
           matchId, 
           awayTeamId = teamId, 
           away_pre_match_differential = pre_match_differential)
  
  # Step 5: Join back to original data
  final_data <- df |>
    left_join(home_results, by = c("season", "matchId", "homeTeamId")) |>
    left_join(away_results, by = c("season", "matchId", "awayTeamId"))
  
  return(final_data)
}

match_info_with_point_diff <- calculate_prematch_differential(match_info)
```

```{r}

df <- player_list |>
  filter(!is.na(playerId)) |>
  select(matchId, playerId, position, firstName, lastName, team) |>
  left_join(match_info_with_point_diff |> 
              select(matchId, 
                     season, 
                     roundNumber, 
                     home_pre_match_differential, 
                     away_pre_match_differential), 
            by = join_by(matchId)) |>
  left_join(player_stats |> select(matchId, playerId, tries), 
            by = join_by(matchId, playerId)) |>
  mutate(home = if_else(team == "Home", 1, 0),
         tries = replace_na(tries, 0),
         scaled_point_diff = scale(
           if_else(
             home == 1,
             home_pre_match_differential,
             away_pre_match_differential
           )
          )
         ) |>
  rename(match_day = roundNumber) |>
  clean_names() |>
  select(-team, -home_pre_match_differential, -away_pre_match_differential)
```

```{r}
fifty_plus_games_wingers <- df |> 
  count(player_id, position) |> 
  filter(n >= 50, position == "Winger")

bayes_df <- df |> filter(player_id %in% fifty_plus_games_wingers$player_id)

formula <- bf(tries ~ home + scaled_point_diff + (1 | player_id),
              family = negbinomial())

priors <- c(
  prior(normal(0, 1), class = "b"),    # For home and point_diff coefficients
  prior(normal(0, 1), class = "Intercept"),  # Overall intercept
  prior(exponential(1), class = "sd", group = "player_id")#,  # SD for random intercepts (player skill)
 # prior(student_t(3, 0, 2.5), class = "sds") # SD for the smooth term (within-season effects)
) 
```

```{r}
fit <- brm(formula = formula,
           data = bayes_df,
           prior = priors,
           iter = 4000, warmup = 2000, chains = 4,
           control = list(adapt_delta = 0.99, max_treedepth = 15),
           seed = 2534)
```

```{r}
library(bayesplot)

pp_check(fit)
```
