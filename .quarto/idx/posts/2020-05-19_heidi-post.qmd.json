{"title":"Visualising Apple Health data |<br>Guest post by Heidi Thornton","markdown":{"yaml":{"title":"Visualising Apple Health data |<br>Guest post by Heidi Thornton","author":"Heidi Thornton","date":"2020-05-19","coverMeta":"out","keywords":"tech","metaAlignment":"center","slug":"visualising-data-measured-from-activity-watches","description":"Tracking data from your Apple watch doesn't have to stay in an app. This post shows you how it can be exported, manipulated, and visualised using R.","thumbnailImage":"/img/Heart.png","thumbnailImagePosition":"left"},"headingText":"Accessing Apple Health data","containsRefs":false,"markdown":"\n\n![](/img/Applehealth.jpg)\n\nAs sports scientists during the COVID-19 shutdown, we have limited ways of determining adherence to training programs (completed within govenment guidelines of course!).\n\nData from smart watches provide practitioners with *basic measures* that can be used as a *rough guide* to quantify training over this period (when using the more sophisticated technologies isn't possible).\n\nAlthough the reliability and validity data of these devices aren't widely available, they provide basic metrics such as total distance, duration, heart rate, and energy burnt etc.\n\nIn this post I'll run through how to:\n\n-   export this data without an [API](https://en.wikipedia.org/wiki/Application_programming_interface)\n-   run some some basic analysis\n-   manipulate and visualise the data using `dplyr` & `ggplot`\n\nYou can find presentation slides covering all content and the full code at the end of the post.\n\n<br>\n\n\n![](/img/Steps.png)\n\n## Step 1\n\nOpen the Apple Health app on your phone, then **summary page** at the top right, then tap the circle showing the first letter of your first name on the top right (left figure above).\n\n## Step 2\n\nSlide down and tap 'Export All Health Data' (middle figure).\n\n## Step 3\n\nThe export takes up to a few minutes, then a page to email or message it will pop up. Email this file to yourself and download it.\n\nIf you don't have an Apple watch and want to use my data, you can [download my `.xml` file here](https://drive.google.com/uc?export=download&id=1ExH8l_OZq84S6jsY26vP8fmemX6YmYIh).\n\n<br>\n\n# Opening Apple Health data\n\nYou can open the `.zip` folder directly using R, however for this project I'll manually extract the file within the folder named `apple_health_export`.\n\nInside, there'll be 2 files. For our purposes, you only need the **export** file.\n\nI've made a new folder that houses all files, and this is where my working directly will be set. In Rstudio, I'll create an R script and load the packages I need. If you don't have these packages installed use `install.packages(\"packagename\")` before loading them with `library()`.\n\n```{r}\n#| label = \"emojis and icons\",\n#| include = FALSE\nlibrary(emo)\nlibrary(fontawesome)\n```\n\n```{r}\n#| label = \"Load packages\",\n#| message = FALSE,\n#| warning = FALSE\nlibrary(\"XML\")\nlibrary(\"methods\")\nlibrary(\"tidyverse\")\nlibrary(\"lubridate\")\n```\n\n# Why do this in R?\n\n![](/img/R.png)\n\n<br>\n\n### R is reproducible \\| Microsoft Excel is not\n\nWe could simply export the raw data into Excel and manipulate / visualise it there, but R isn't that difficult, and there are lots of resources out there to help learn it.\n\nHave the **end game** in mind.\n\n<br>\n\n# Import the data into R\n\nThe file format (XML; Extensible Markup Language) is quite easy to work with in R using the `XML` package.\n\nIf you have multiple `.xml` files you can use a loop to access them all - I'll only be using one file for this example and it's saved in my working directory.\n\nFirst, we need to make an object that I'll call `xml` and view it's contents using `summary(xml)`.\n\n<br>\n\n```{r}\n#| label = \"Open XML\",\n#| echo = TRUE,\n#| paged.print = FALSE\nxml <- xmlParse(paste(\"heidi-thornton_apple-data.xml\"))\nsummary(xml)\n```\n\n<br>\n\n# View the data\n\nI'm interested in the workout data. We can open this using `xmlAttrsToDataFrame()`.\n\n```{r}\n#| label = \"Open df_workout\",\n#| echo = TRUE\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])[c(1:2, 4, 6, 12)]\nhead(df_workout, n = 5) # View the top 5 rows of data\n```\n\nHere we have the session type and the respective data for each day (in need of some cleaning).\n\n<br>\n\n# Plotting data\n\nLets start by filtering so only the data I want to plot remains.\n\nWe will use `%>%` (pipes) from the `tidyverse` package perform this as it's much quicker than making new data frames for each plot, and we'll plot the data using `ggplot2`.\n\n<br>\n\n### Daily running sessions\n\n```{r}\n#| label = \"Distance Graph ouput\",\n#| echo = TRUE,\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE,\n#| font.size = 10\ndf_workout %>%\n  \n    # Change data types (i.e. distance to m not km, numeric) \n      mutate(\n        workoutActivityType = as.character(workoutActivityType),\n        totalDistance = as.numeric(as.character(totalDistance))*1000,\n        duration = as.numeric(duration),\n        endDate = as.Date(endDate)) %>% \n  \n    # Only running sessions- depending on watch the name may differ\n      filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n      filter(endDate >= \"2020-03-23\") %>% # only after shut down\n\n# Create ggplot    \nggplot(aes(x= endDate, y = totalDistance)) +\n    geom_bar(stat=\"identity\", fill='#5ab4ac')+\n    labs(title = \"Not exactly periodised, but it's better than nothing....\",\n           subtitle = \"Daily running volume (m)\",\n           x = \"Date\",\n           y = NULL) +\n    scale_x_date(date_breaks = \"7 days\",\n                   date_labels = \"%b %d\") + \n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() +\n    theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n```\n\nNow we have our first plot showing my running over the days after the COVID shut down.\n\n<br>\n\n### Weekly running volume\n\nWe need to manipulate the data a bit more to get the weekly running volume.\n\n```{r}\n#| label = \"Weekly volume\",\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE\ndf_workout %>%\n  \n   mutate(\n    workoutActivityType = as.character(workoutActivityType),\n    totalDistance = as.numeric(as.character(totalDistance))*1000,\n    endDate = as.Date(endDate),\n    week = isoweek(ymd(endDate))) %>% # Add week column\n  \n   filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n   filter(endDate >= \"2020-03-23\") %>%\n   group_by(week) %>% # summarise by week (starts week in 1st jan)\n  \nggplot(aes(x = week, y = totalDistance)) + \n  geom_bar(stat = \"identity\", fill='#5ab4ac') +\n  labs(title = \"Cardinal rule of training: Be consistent\",\n       subtitle = \"Total distance (m) across annual weeks\",\n       x = \"Annual Week\",\n       y = NULL) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_x_continuous(breaks = seq(13, 19, 1)) +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n```\n\n<br>\n\n### Energy consumption\n\nI want to know energy consumption by **activity type**. To extract a clean name for this we need to do some string manipulation using the `str_sub()` function from the `stringr` package (part of the `tidyverse`).\n\n```{r}\n#| label = \"energy graph\",\n#| echo = TRUE,\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE\ndf_workout %>%\n  \n   mutate(\n      workoutActivityType = as.character(workoutActivityType),\n      totalDistance = as.numeric(as.character(totalDistance)) * 1000,\n      totalEnergyBurned = as.numeric(as.character(totalEnergyBurned)),\n      endDate = as.Date(endDate), \n      \n      # Add week column\n      week = isoweek(ymd(endDate)), \n      \n      # new column- text after 22nd character\n      Type = str_sub(workoutActivityType, 22)) %>%\n  \n   # Filter out cycling\n   filter(endDate >= \"2020-03-23\" & Type %in% c('Running','Other')) %>% \n   group_by(week) %>%\n\nggplot(aes(x = week, y = totalEnergyBurned, fill = Type)) + \n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    facet_wrap(~Type) +\n    labs(title = \"Weekly energy consumption (kj) by activity type\",\n        subtitle = \"'Other' sessions include weights or walking\",\n        y = NULL,\n        x = \"Annual week\") +\n    scale_x_continuous(breaks = seq(13, 19, by = 1)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() + \n    theme(legend.position = \"none\",\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank(),\n          axis.line.x = element_line(colour = \"black\", size = 1),\n          axis.title = element_text(face = \"bold\"),\n          plot.title = element_text(face = \"bold\"),\n          strip.text = element_text(face = \"bold\"))\n```\n\n<br>\n\n### General activity data\n\nLets move on from workout data and import 'Record' data. This one will take a while to load.\n\n```{r}\n#| label = \"Import record data\",\n#| message = FALSE,\n#| warning = FALSE\ndf_record <-  XML:::xmlAttrsToDataFrame(xml[\"//Record\"]) [c(1,6,8)]\n\n# See data types available in record\n  df_record %>% \n    mutate(Type = str_sub(type, 25)) %>% # Include text after the 25th character\n    select(Type) %>% distinct\n```\n\nIf you want to view the full dataset, you can use `view(df_record)`.\n\n<br>\n\n### Step data manipulation\n\nThis one isn't exactly useful for athletes - this is more for my own interest of my activity (or lack of) during the COVID shut down.\n\nI am replicating a plot created by [Taras Kaduk](https://twitter.com/taraskaduk) on his blog post titled [Analyze and visualize your iPhone's Health app data in R](https://taraskaduk.com/2019/03/23/apple-health/).\n\n```{r}\n#| label = \"Step count plot by hour\",\n#| echo = TRUE,\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE\n\ndf_record %>%\n  \n   mutate(\n      # Rename type by removing that text \n       Type = str_remove(type, \"HKQuantityTypeIdentifier\"), \n       value = as.numeric(as.character(value)),\n       Date = as.Date.character(startDate),\n       weekday = wday(Date), # Day of week\n       hour = hour(startDate)) %>% # Need to use the factor date\n   filter(Type == 'StepCount' & Date >= \"2020-03-23\") %>%\n   group_by(Date, weekday, hour) %>%  # Summarise by date, weekday and hour\n   summarise(value = sum(value)) %>% # Sum steps over ^^\n   group_by(weekday, hour) %>% # Now summarise by weekday and hour  \n   summarise(value = mean(value)) %>% # Take mean steps over ^^\n   filter(between(hour,6,21)) %>% # Filtering to include between 6am - 9pm\n \nggplot(aes(x = hour, y = weekday,  fill = value)) +\n  geom_tile(col = 'grey40') +\n  scale_fill_continuous(labels = scales::comma,\n                        low = 'grey95',\n                        high = '#008FD5') +\n  scale_x_continuous(\n    breaks = c(6, 9, 12, 15, 18),\n    label = c(\"6 AM\", \"9 AM\", \"Midday\", \"3PM\", \"6 PM\")) +\n  scale_y_reverse(\n    breaks = c(1, 2, 3, 4, 5, 6, 7),\n    label = c(\"Sunday\",\n              \"Monday\",\n              \"Tuesday\",\n              \"Wednesday\",\n              \"Thursday\",\n              \"Friday\",\n              \"Saturday\")) +\n  labs(\n    title = \"Not a lot of activity at the moment....\",\n    subtitle = \"Step count heatmap by hour by day\",\n    y = NULL,\n    x = NULL) +\n  guides(fill = FALSE) +\n  coord_equal() +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(),\n        plot.title = element_text(face = \"bold\"))\n```\n\n<br>\n\n### Heart rate data\n\nOne last one - we will plot HR across 2 days. I have added a colour scale for low (green) and high (red).\n\n```{r}\n#| label = \"HR Graph\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\ndf_record %>%\n  mutate(Type = str_remove(type, \"HKQuantityTypeIdentifier\"), # Rename \n      value = as.numeric(as.character(value)), \n      startDate = as_datetime(startDate),\n      Date = as.Date.character(startDate)) %>% \n      filter(Type == 'HeartRate') %>%\n        filter(Date >= as.Date(\"2020-04-03\") &  Date <= as.Date(\"2020-04-04\")) %>%\n  \nggplot(aes(x = startDate, y = value, colour = value)) +\n  geom_line(size = 0.75) +\n  scale_color_gradient(low = \"springgreen3\", high = \"firebrick2\") +\n  labs(title = NULL,\n       y = \"Heart rate\",\n       x = NULL) +\n  expand_limits(y = c(50, 200)) + \n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n```\n\n<br>\n\n# Access more Apple Health info\n\nThere are other data types available from Apple Health\n\n```{Apple}\n#| label = \"Health Data types\"\ndf_record <-   XML:::xmlAttrsToDataFrame(xml[\"//Record\"])\ndf_activity <- XML:::xmlAttrsToDataFrame(xml[\"//ActivitySummary\"])\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])\ndf_clinical <- XML:::xmlAttrsToDataFrame(xml[\"//ClinicalRecord\"])\ndf_location <- XML:::xmlAttrsToDataFrame(xml[\"//Location\"])\n```\n\n<br> <br>\n\nFor more information on analysing Apple Health data, check out:\n\n-   [Analyze and visualize your iPhone's Health app data in R](https://taraskaduk.com/2019/03/23/apple-health/) by [Taras Kaduk](https://twitter.com/taraskaduk)\n\n-   [Explore your Apple Watch heart rate data in R](https://jeffjjohnston.github.io/rstudio/rmarkdown/2016/04/28/explore-your-apple-watch-heart-rate-data.html) by [Jeff Johnston](https://twitter.com/jeffj312).\n\n<br> <br>\n\n# Thanks for looking! `r emo::ji(\"blush\")`\n\nThe presentation slides for this post can be viewed [full screen](https://mitchhenderson.github.io/heidi-slides/Heidi-Presentation-Xaringan--2-.html) or embedded below.\n\n<br>\n\n```{r}\n#| echo = FALSE\nknitr::include_url('https://mitchhenderson.github.io/heidi-slides/Heidi-Presentation-Xaringan--2-.html')\n```\n\n<br>\n\nIf you want to learn more about R, there is some awesome work out there from fellow Aussies!\n\n[Alice Sweeting](http://sportstatisticsrsweet.rbind.io/)<br>\n\n[Mitch Henderson](https://www.mitchhenderson.org/)<br>\n\n[Jacquie Tran](https://www.jacquietran.com/)<br>\n\n<br> <br>\n\n<a href=\"https://twitter.com/heidithornton09?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\">@heidithornton09</a>\n\n```{=html}\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n`r emo::ji(\"envelope_with_arrow\")` [heidi.thornton\\@goldcoastfc.com.au](mailto:heidi.thornton@goldcoastfc.com.au)\n\n<br>\n\n*Thumbnail image from [Apple.com](https://www.apple.com/au/ios/health/)*\n\n<br>\n\n# Full code\n\n```{r}\n#| label = \"full code\",\n#| eval = FALSE,\n#| message = FALSE,\n#| warning = FALSE\nlibrary(\"XML\")\nlibrary(\"methods\")\nlibrary(\"tidyverse\")\nlibrary(\"lubridate\")\n\nxml <- xmlParse(paste(\"heidi-thornton_apple-data.xml\"))\nsummary(xml)\n\n\n\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])[c(1:2, 4, 6, 12)]\nhead(df_workout, n = 5) # View the top 5 rows of data\n\n\n\n# Daily running chart\n\ndf_workout %>%\n  \n    # Change data types (i.e. distance to m not km, numeric) \n      mutate(\n        workoutActivityType = as.character(workoutActivityType),\n        totalDistance = as.numeric(as.character(totalDistance))*1000,\n        duration = as.numeric(duration),\n        endDate = as.Date(endDate)) %>% \n  \n    # Only running sessions- depending on watch the name may differ\n      filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n      filter(endDate >= \"2020-03-23\") %>% # only after shut down\n\n# Create ggplot    \nggplot(aes(x= endDate, y = totalDistance)) +\n    geom_bar(stat=\"identity\", fill='#5ab4ac')+\n    labs(title = \"Not exactly periodised, but it's better than nothing....\",\n           subtitle = \"Daily running volume (m)\",\n           x = \"Date\",\n           y = NULL) +\n    scale_x_date(date_breaks = \"7 days\",\n                   date_labels = \"%b %d\") + \n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() +\n    theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n\n\n# Weekly running chart\n\ndf_workout %>%\n  \n   mutate(\n    workoutActivityType = as.character(workoutActivityType),\n    totalDistance = as.numeric(as.character(totalDistance))*1000,\n    endDate = as.Date(endDate),\n    week = isoweek(ymd(endDate))) %>% # Add week column\n  \n   filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n   filter(endDate >= \"2020-03-23\") %>%\n   group_by(week) %>% # summarise by week (starts week in 1st jan)\n  \nggplot(aes(x = week, y = totalDistance)) + \n  geom_bar(stat = \"identity\", fill='#5ab4ac') +\n  labs(title = \"Cardinal rule of training: Be consistent\",\n       subtitle = \"Total distance (m) across annual weeks\",\n       x = \"Annual Week\",\n       y = NULL) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_x_continuous(breaks = seq(13, 19, 1)) +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n\n\n# Energy consumption (Other vs Running) chart\n\ndf_workout %>%\n  \n   mutate(\n      workoutActivityType = as.character(workoutActivityType),\n      totalDistance = as.numeric(as.character(totalDistance)) * 1000,\n      totalEnergyBurned = as.numeric(as.character(totalEnergyBurned)),\n      endDate = as.Date(endDate), \n      \n      # Add week column\n      week = isoweek(ymd(endDate)), \n      \n      # new column- text after 22nd character\n      Type = str_sub(workoutActivityType, 22)) %>%\n  \n   # Filter out cycling\n   filter(endDate >= \"2020-03-23\" & Type %in% c('Running','Other')) %>% \n   group_by(week) %>%\n\nggplot(aes(x = week, y = totalEnergyBurned, fill = Type)) + \n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    facet_wrap(~Type) +\n    labs(title = \"Weekly energy consumption (kj) by session type\",\n        subtitle = \"'Other' sessions include weights or walking\",\n        y = NULL,\n        x = \"Annual week\") +\n    scale_x_continuous(breaks = seq(13, 19, by = 1)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() + \n    theme(legend.position = \"none\",\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank(),\n          axis.line.x = element_line(colour = \"black\", size = 1),\n          axis.title = element_text(face = \"bold\"),\n          plot.title = element_text(face = \"bold\"),\n          strip.text = element_text(face = \"bold\"))\n\n\n# Extract record data\n\ndf_record <-  XML:::xmlAttrsToDataFrame(xml[\"//Record\"]) [c(1,6,8)]\n\n# See data types available in record\n  df_record %>% \n    mutate(Type = str_sub(type, 25)) %>% # Include text after the 25th character\n    select(Type) %>% distinct\n  \n  \n  \n# Step count chart\n  \ndf_record %>%\n  \n   mutate(\n      # Rename type by removing that text \n       Type = str_remove(type, \"HKQuantityTypeIdentifier\"), \n       value = as.numeric(as.character(value)),\n       Date = as.Date.character(startDate),\n       weekday = wday(Date), # Day of week\n       hour = hour(startDate)) %>% # Need to use the factor date\n   filter(Type == 'StepCount' & Date >= \"2020-03-23\") %>%\n   group_by(Date, weekday, hour) %>%  # Summarise by date, weekday and hour\n   summarise(value = sum(value)) %>% # Sum steps over ^^\n   group_by(weekday, hour) %>% # Now summarise by weekday and hour  \n   summarise(value = mean(value)) %>% # Take mean steps over ^^\n   filter(between(hour,6,21)) %>% # Filtering to include between 6am - 9pm\n \nggplot(aes(x = hour, y = weekday,  fill = value)) +\n  geom_tile(col = 'grey40') +\n  scale_fill_continuous(labels = scales::comma,\n                        low = 'grey95',\n                        high = '#008FD5') +\n  scale_x_continuous(\n    breaks = c(6, 9, 12, 15, 18),\n    label = c(\"6 AM\", \"9 AM\", \"Midday\", \"3PM\", \"6 PM\")) +\n  scale_y_reverse(\n    breaks = c(1, 2, 3, 4, 5, 6, 7),\n    label = c(\"Sunday\",\n              \"Monday\",\n              \"Tuesday\",\n              \"Wednesday\",\n              \"Thursday\",\n              \"Friday\",\n              \"Saturday\")) +\n  labs(\n    title = \"Not a lot of activity at the moment....\",\n    subtitle = \"Step count heatmap by hour by day\",\n    y = NULL,\n    x = NULL) +\n  guides(fill = FALSE) +\n  coord_equal() +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(),\n        plot.title = element_text(face = \"bold\"))\n\n\n\n# Heart rate chart\n\ndf_record %>%\n  mutate(Type = str_remove(type, \"HKQuantityTypeIdentifier\"), # Rename \n      value = as.numeric(as.character(value)), \n      startDate = as_datetime(startDate),\n      Date = as.Date.character(startDate)) %>% \n      filter(Type == 'HeartRate') %>%\n        filter(Date >= as.Date(\"2020-04-03\") &  Date <= as.Date(\"2020-04-04\")) %>%\n  \nggplot(aes(x = startDate, y = value, colour = value)) +\n  geom_line(size = 0.75) +\n  scale_color_gradient(low = \"springgreen3\", high = \"firebrick2\") +\n  labs(title = NULL,\n       y = \"Heart rate\",\n       x = NULL) +\n  expand_limits(y = c(50, 200)) + \n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n\n\n# Other types of data from Apple Health\n\ndf_record <-   XML:::xmlAttrsToDataFrame(xml[\"//Record\"])\ndf_activity <- XML:::xmlAttrsToDataFrame(xml[\"//ActivitySummary\"])\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])\ndf_clinical <- XML:::xmlAttrsToDataFrame(xml[\"//ClinicalRecord\"])\ndf_location <- XML:::xmlAttrsToDataFrame(xml[\"//Location\"])\n```\n","srcMarkdownNoYaml":"\n\n![](/img/Applehealth.jpg)\n\nAs sports scientists during the COVID-19 shutdown, we have limited ways of determining adherence to training programs (completed within govenment guidelines of course!).\n\nData from smart watches provide practitioners with *basic measures* that can be used as a *rough guide* to quantify training over this period (when using the more sophisticated technologies isn't possible).\n\nAlthough the reliability and validity data of these devices aren't widely available, they provide basic metrics such as total distance, duration, heart rate, and energy burnt etc.\n\nIn this post I'll run through how to:\n\n-   export this data without an [API](https://en.wikipedia.org/wiki/Application_programming_interface)\n-   run some some basic analysis\n-   manipulate and visualise the data using `dplyr` & `ggplot`\n\nYou can find presentation slides covering all content and the full code at the end of the post.\n\n<br>\n\n# Accessing Apple Health data\n\n![](/img/Steps.png)\n\n## Step 1\n\nOpen the Apple Health app on your phone, then **summary page** at the top right, then tap the circle showing the first letter of your first name on the top right (left figure above).\n\n## Step 2\n\nSlide down and tap 'Export All Health Data' (middle figure).\n\n## Step 3\n\nThe export takes up to a few minutes, then a page to email or message it will pop up. Email this file to yourself and download it.\n\nIf you don't have an Apple watch and want to use my data, you can [download my `.xml` file here](https://drive.google.com/uc?export=download&id=1ExH8l_OZq84S6jsY26vP8fmemX6YmYIh).\n\n<br>\n\n# Opening Apple Health data\n\nYou can open the `.zip` folder directly using R, however for this project I'll manually extract the file within the folder named `apple_health_export`.\n\nInside, there'll be 2 files. For our purposes, you only need the **export** file.\n\nI've made a new folder that houses all files, and this is where my working directly will be set. In Rstudio, I'll create an R script and load the packages I need. If you don't have these packages installed use `install.packages(\"packagename\")` before loading them with `library()`.\n\n```{r}\n#| label = \"emojis and icons\",\n#| include = FALSE\nlibrary(emo)\nlibrary(fontawesome)\n```\n\n```{r}\n#| label = \"Load packages\",\n#| message = FALSE,\n#| warning = FALSE\nlibrary(\"XML\")\nlibrary(\"methods\")\nlibrary(\"tidyverse\")\nlibrary(\"lubridate\")\n```\n\n# Why do this in R?\n\n![](/img/R.png)\n\n<br>\n\n### R is reproducible \\| Microsoft Excel is not\n\nWe could simply export the raw data into Excel and manipulate / visualise it there, but R isn't that difficult, and there are lots of resources out there to help learn it.\n\nHave the **end game** in mind.\n\n<br>\n\n# Import the data into R\n\nThe file format (XML; Extensible Markup Language) is quite easy to work with in R using the `XML` package.\n\nIf you have multiple `.xml` files you can use a loop to access them all - I'll only be using one file for this example and it's saved in my working directory.\n\nFirst, we need to make an object that I'll call `xml` and view it's contents using `summary(xml)`.\n\n<br>\n\n```{r}\n#| label = \"Open XML\",\n#| echo = TRUE,\n#| paged.print = FALSE\nxml <- xmlParse(paste(\"heidi-thornton_apple-data.xml\"))\nsummary(xml)\n```\n\n<br>\n\n# View the data\n\nI'm interested in the workout data. We can open this using `xmlAttrsToDataFrame()`.\n\n```{r}\n#| label = \"Open df_workout\",\n#| echo = TRUE\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])[c(1:2, 4, 6, 12)]\nhead(df_workout, n = 5) # View the top 5 rows of data\n```\n\nHere we have the session type and the respective data for each day (in need of some cleaning).\n\n<br>\n\n# Plotting data\n\nLets start by filtering so only the data I want to plot remains.\n\nWe will use `%>%` (pipes) from the `tidyverse` package perform this as it's much quicker than making new data frames for each plot, and we'll plot the data using `ggplot2`.\n\n<br>\n\n### Daily running sessions\n\n```{r}\n#| label = \"Distance Graph ouput\",\n#| echo = TRUE,\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE,\n#| font.size = 10\ndf_workout %>%\n  \n    # Change data types (i.e. distance to m not km, numeric) \n      mutate(\n        workoutActivityType = as.character(workoutActivityType),\n        totalDistance = as.numeric(as.character(totalDistance))*1000,\n        duration = as.numeric(duration),\n        endDate = as.Date(endDate)) %>% \n  \n    # Only running sessions- depending on watch the name may differ\n      filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n      filter(endDate >= \"2020-03-23\") %>% # only after shut down\n\n# Create ggplot    \nggplot(aes(x= endDate, y = totalDistance)) +\n    geom_bar(stat=\"identity\", fill='#5ab4ac')+\n    labs(title = \"Not exactly periodised, but it's better than nothing....\",\n           subtitle = \"Daily running volume (m)\",\n           x = \"Date\",\n           y = NULL) +\n    scale_x_date(date_breaks = \"7 days\",\n                   date_labels = \"%b %d\") + \n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() +\n    theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n```\n\nNow we have our first plot showing my running over the days after the COVID shut down.\n\n<br>\n\n### Weekly running volume\n\nWe need to manipulate the data a bit more to get the weekly running volume.\n\n```{r}\n#| label = \"Weekly volume\",\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE\ndf_workout %>%\n  \n   mutate(\n    workoutActivityType = as.character(workoutActivityType),\n    totalDistance = as.numeric(as.character(totalDistance))*1000,\n    endDate = as.Date(endDate),\n    week = isoweek(ymd(endDate))) %>% # Add week column\n  \n   filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n   filter(endDate >= \"2020-03-23\") %>%\n   group_by(week) %>% # summarise by week (starts week in 1st jan)\n  \nggplot(aes(x = week, y = totalDistance)) + \n  geom_bar(stat = \"identity\", fill='#5ab4ac') +\n  labs(title = \"Cardinal rule of training: Be consistent\",\n       subtitle = \"Total distance (m) across annual weeks\",\n       x = \"Annual Week\",\n       y = NULL) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_x_continuous(breaks = seq(13, 19, 1)) +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n```\n\n<br>\n\n### Energy consumption\n\nI want to know energy consumption by **activity type**. To extract a clean name for this we need to do some string manipulation using the `str_sub()` function from the `stringr` package (part of the `tidyverse`).\n\n```{r}\n#| label = \"energy graph\",\n#| echo = TRUE,\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE\ndf_workout %>%\n  \n   mutate(\n      workoutActivityType = as.character(workoutActivityType),\n      totalDistance = as.numeric(as.character(totalDistance)) * 1000,\n      totalEnergyBurned = as.numeric(as.character(totalEnergyBurned)),\n      endDate = as.Date(endDate), \n      \n      # Add week column\n      week = isoweek(ymd(endDate)), \n      \n      # new column- text after 22nd character\n      Type = str_sub(workoutActivityType, 22)) %>%\n  \n   # Filter out cycling\n   filter(endDate >= \"2020-03-23\" & Type %in% c('Running','Other')) %>% \n   group_by(week) %>%\n\nggplot(aes(x = week, y = totalEnergyBurned, fill = Type)) + \n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    facet_wrap(~Type) +\n    labs(title = \"Weekly energy consumption (kj) by activity type\",\n        subtitle = \"'Other' sessions include weights or walking\",\n        y = NULL,\n        x = \"Annual week\") +\n    scale_x_continuous(breaks = seq(13, 19, by = 1)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() + \n    theme(legend.position = \"none\",\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank(),\n          axis.line.x = element_line(colour = \"black\", size = 1),\n          axis.title = element_text(face = \"bold\"),\n          plot.title = element_text(face = \"bold\"),\n          strip.text = element_text(face = \"bold\"))\n```\n\n<br>\n\n### General activity data\n\nLets move on from workout data and import 'Record' data. This one will take a while to load.\n\n```{r}\n#| label = \"Import record data\",\n#| message = FALSE,\n#| warning = FALSE\ndf_record <-  XML:::xmlAttrsToDataFrame(xml[\"//Record\"]) [c(1,6,8)]\n\n# See data types available in record\n  df_record %>% \n    mutate(Type = str_sub(type, 25)) %>% # Include text after the 25th character\n    select(Type) %>% distinct\n```\n\nIf you want to view the full dataset, you can use `view(df_record)`.\n\n<br>\n\n### Step data manipulation\n\nThis one isn't exactly useful for athletes - this is more for my own interest of my activity (or lack of) during the COVID shut down.\n\nI am replicating a plot created by [Taras Kaduk](https://twitter.com/taraskaduk) on his blog post titled [Analyze and visualize your iPhone's Health app data in R](https://taraskaduk.com/2019/03/23/apple-health/).\n\n```{r}\n#| label = \"Step count plot by hour\",\n#| echo = TRUE,\n#| fig.align = \"center\",\n#| message = FALSE,\n#| warning = FALSE\n\ndf_record %>%\n  \n   mutate(\n      # Rename type by removing that text \n       Type = str_remove(type, \"HKQuantityTypeIdentifier\"), \n       value = as.numeric(as.character(value)),\n       Date = as.Date.character(startDate),\n       weekday = wday(Date), # Day of week\n       hour = hour(startDate)) %>% # Need to use the factor date\n   filter(Type == 'StepCount' & Date >= \"2020-03-23\") %>%\n   group_by(Date, weekday, hour) %>%  # Summarise by date, weekday and hour\n   summarise(value = sum(value)) %>% # Sum steps over ^^\n   group_by(weekday, hour) %>% # Now summarise by weekday and hour  \n   summarise(value = mean(value)) %>% # Take mean steps over ^^\n   filter(between(hour,6,21)) %>% # Filtering to include between 6am - 9pm\n \nggplot(aes(x = hour, y = weekday,  fill = value)) +\n  geom_tile(col = 'grey40') +\n  scale_fill_continuous(labels = scales::comma,\n                        low = 'grey95',\n                        high = '#008FD5') +\n  scale_x_continuous(\n    breaks = c(6, 9, 12, 15, 18),\n    label = c(\"6 AM\", \"9 AM\", \"Midday\", \"3PM\", \"6 PM\")) +\n  scale_y_reverse(\n    breaks = c(1, 2, 3, 4, 5, 6, 7),\n    label = c(\"Sunday\",\n              \"Monday\",\n              \"Tuesday\",\n              \"Wednesday\",\n              \"Thursday\",\n              \"Friday\",\n              \"Saturday\")) +\n  labs(\n    title = \"Not a lot of activity at the moment....\",\n    subtitle = \"Step count heatmap by hour by day\",\n    y = NULL,\n    x = NULL) +\n  guides(fill = FALSE) +\n  coord_equal() +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(),\n        plot.title = element_text(face = \"bold\"))\n```\n\n<br>\n\n### Heart rate data\n\nOne last one - we will plot HR across 2 days. I have added a colour scale for low (green) and high (red).\n\n```{r}\n#| label = \"HR Graph\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\ndf_record %>%\n  mutate(Type = str_remove(type, \"HKQuantityTypeIdentifier\"), # Rename \n      value = as.numeric(as.character(value)), \n      startDate = as_datetime(startDate),\n      Date = as.Date.character(startDate)) %>% \n      filter(Type == 'HeartRate') %>%\n        filter(Date >= as.Date(\"2020-04-03\") &  Date <= as.Date(\"2020-04-04\")) %>%\n  \nggplot(aes(x = startDate, y = value, colour = value)) +\n  geom_line(size = 0.75) +\n  scale_color_gradient(low = \"springgreen3\", high = \"firebrick2\") +\n  labs(title = NULL,\n       y = \"Heart rate\",\n       x = NULL) +\n  expand_limits(y = c(50, 200)) + \n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n```\n\n<br>\n\n# Access more Apple Health info\n\nThere are other data types available from Apple Health\n\n```{Apple}\n#| label = \"Health Data types\"\ndf_record <-   XML:::xmlAttrsToDataFrame(xml[\"//Record\"])\ndf_activity <- XML:::xmlAttrsToDataFrame(xml[\"//ActivitySummary\"])\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])\ndf_clinical <- XML:::xmlAttrsToDataFrame(xml[\"//ClinicalRecord\"])\ndf_location <- XML:::xmlAttrsToDataFrame(xml[\"//Location\"])\n```\n\n<br> <br>\n\nFor more information on analysing Apple Health data, check out:\n\n-   [Analyze and visualize your iPhone's Health app data in R](https://taraskaduk.com/2019/03/23/apple-health/) by [Taras Kaduk](https://twitter.com/taraskaduk)\n\n-   [Explore your Apple Watch heart rate data in R](https://jeffjjohnston.github.io/rstudio/rmarkdown/2016/04/28/explore-your-apple-watch-heart-rate-data.html) by [Jeff Johnston](https://twitter.com/jeffj312).\n\n<br> <br>\n\n# Thanks for looking! `r emo::ji(\"blush\")`\n\nThe presentation slides for this post can be viewed [full screen](https://mitchhenderson.github.io/heidi-slides/Heidi-Presentation-Xaringan--2-.html) or embedded below.\n\n<br>\n\n```{r}\n#| echo = FALSE\nknitr::include_url('https://mitchhenderson.github.io/heidi-slides/Heidi-Presentation-Xaringan--2-.html')\n```\n\n<br>\n\nIf you want to learn more about R, there is some awesome work out there from fellow Aussies!\n\n[Alice Sweeting](http://sportstatisticsrsweet.rbind.io/)<br>\n\n[Mitch Henderson](https://www.mitchhenderson.org/)<br>\n\n[Jacquie Tran](https://www.jacquietran.com/)<br>\n\n<br> <br>\n\n<a href=\"https://twitter.com/heidithornton09?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\">@heidithornton09</a>\n\n```{=html}\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n`r emo::ji(\"envelope_with_arrow\")` [heidi.thornton\\@goldcoastfc.com.au](mailto:heidi.thornton@goldcoastfc.com.au)\n\n<br>\n\n*Thumbnail image from [Apple.com](https://www.apple.com/au/ios/health/)*\n\n<br>\n\n# Full code\n\n```{r}\n#| label = \"full code\",\n#| eval = FALSE,\n#| message = FALSE,\n#| warning = FALSE\nlibrary(\"XML\")\nlibrary(\"methods\")\nlibrary(\"tidyverse\")\nlibrary(\"lubridate\")\n\nxml <- xmlParse(paste(\"heidi-thornton_apple-data.xml\"))\nsummary(xml)\n\n\n\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])[c(1:2, 4, 6, 12)]\nhead(df_workout, n = 5) # View the top 5 rows of data\n\n\n\n# Daily running chart\n\ndf_workout %>%\n  \n    # Change data types (i.e. distance to m not km, numeric) \n      mutate(\n        workoutActivityType = as.character(workoutActivityType),\n        totalDistance = as.numeric(as.character(totalDistance))*1000,\n        duration = as.numeric(duration),\n        endDate = as.Date(endDate)) %>% \n  \n    # Only running sessions- depending on watch the name may differ\n      filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n      filter(endDate >= \"2020-03-23\") %>% # only after shut down\n\n# Create ggplot    \nggplot(aes(x= endDate, y = totalDistance)) +\n    geom_bar(stat=\"identity\", fill='#5ab4ac')+\n    labs(title = \"Not exactly periodised, but it's better than nothing....\",\n           subtitle = \"Daily running volume (m)\",\n           x = \"Date\",\n           y = NULL) +\n    scale_x_date(date_breaks = \"7 days\",\n                   date_labels = \"%b %d\") + \n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() +\n    theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n\n\n# Weekly running chart\n\ndf_workout %>%\n  \n   mutate(\n    workoutActivityType = as.character(workoutActivityType),\n    totalDistance = as.numeric(as.character(totalDistance))*1000,\n    endDate = as.Date(endDate),\n    week = isoweek(ymd(endDate))) %>% # Add week column\n  \n   filter(workoutActivityType == \"HKWorkoutActivityTypeRunning\") %>%\n   filter(endDate >= \"2020-03-23\") %>%\n   group_by(week) %>% # summarise by week (starts week in 1st jan)\n  \nggplot(aes(x = week, y = totalDistance)) + \n  geom_bar(stat = \"identity\", fill='#5ab4ac') +\n  labs(title = \"Cardinal rule of training: Be consistent\",\n       subtitle = \"Total distance (m) across annual weeks\",\n       x = \"Annual Week\",\n       y = NULL) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_x_continuous(breaks = seq(13, 19, 1)) +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.line.x = element_line(colour = \"black\", size = 1),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n\n\n# Energy consumption (Other vs Running) chart\n\ndf_workout %>%\n  \n   mutate(\n      workoutActivityType = as.character(workoutActivityType),\n      totalDistance = as.numeric(as.character(totalDistance)) * 1000,\n      totalEnergyBurned = as.numeric(as.character(totalEnergyBurned)),\n      endDate = as.Date(endDate), \n      \n      # Add week column\n      week = isoweek(ymd(endDate)), \n      \n      # new column- text after 22nd character\n      Type = str_sub(workoutActivityType, 22)) %>%\n  \n   # Filter out cycling\n   filter(endDate >= \"2020-03-23\" & Type %in% c('Running','Other')) %>% \n   group_by(week) %>%\n\nggplot(aes(x = week, y = totalEnergyBurned, fill = Type)) + \n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    facet_wrap(~Type) +\n    labs(title = \"Weekly energy consumption (kj) by session type\",\n        subtitle = \"'Other' sessions include weights or walking\",\n        y = NULL,\n        x = \"Annual week\") +\n    scale_x_continuous(breaks = seq(13, 19, by = 1)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme_minimal() + \n    theme(legend.position = \"none\",\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank(),\n          axis.line.x = element_line(colour = \"black\", size = 1),\n          axis.title = element_text(face = \"bold\"),\n          plot.title = element_text(face = \"bold\"),\n          strip.text = element_text(face = \"bold\"))\n\n\n# Extract record data\n\ndf_record <-  XML:::xmlAttrsToDataFrame(xml[\"//Record\"]) [c(1,6,8)]\n\n# See data types available in record\n  df_record %>% \n    mutate(Type = str_sub(type, 25)) %>% # Include text after the 25th character\n    select(Type) %>% distinct\n  \n  \n  \n# Step count chart\n  \ndf_record %>%\n  \n   mutate(\n      # Rename type by removing that text \n       Type = str_remove(type, \"HKQuantityTypeIdentifier\"), \n       value = as.numeric(as.character(value)),\n       Date = as.Date.character(startDate),\n       weekday = wday(Date), # Day of week\n       hour = hour(startDate)) %>% # Need to use the factor date\n   filter(Type == 'StepCount' & Date >= \"2020-03-23\") %>%\n   group_by(Date, weekday, hour) %>%  # Summarise by date, weekday and hour\n   summarise(value = sum(value)) %>% # Sum steps over ^^\n   group_by(weekday, hour) %>% # Now summarise by weekday and hour  \n   summarise(value = mean(value)) %>% # Take mean steps over ^^\n   filter(between(hour,6,21)) %>% # Filtering to include between 6am - 9pm\n \nggplot(aes(x = hour, y = weekday,  fill = value)) +\n  geom_tile(col = 'grey40') +\n  scale_fill_continuous(labels = scales::comma,\n                        low = 'grey95',\n                        high = '#008FD5') +\n  scale_x_continuous(\n    breaks = c(6, 9, 12, 15, 18),\n    label = c(\"6 AM\", \"9 AM\", \"Midday\", \"3PM\", \"6 PM\")) +\n  scale_y_reverse(\n    breaks = c(1, 2, 3, 4, 5, 6, 7),\n    label = c(\"Sunday\",\n              \"Monday\",\n              \"Tuesday\",\n              \"Wednesday\",\n              \"Thursday\",\n              \"Friday\",\n              \"Saturday\")) +\n  labs(\n    title = \"Not a lot of activity at the moment....\",\n    subtitle = \"Step count heatmap by hour by day\",\n    y = NULL,\n    x = NULL) +\n  guides(fill = FALSE) +\n  coord_equal() +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(),\n        plot.title = element_text(face = \"bold\"))\n\n\n\n# Heart rate chart\n\ndf_record %>%\n  mutate(Type = str_remove(type, \"HKQuantityTypeIdentifier\"), # Rename \n      value = as.numeric(as.character(value)), \n      startDate = as_datetime(startDate),\n      Date = as.Date.character(startDate)) %>% \n      filter(Type == 'HeartRate') %>%\n        filter(Date >= as.Date(\"2020-04-03\") &  Date <= as.Date(\"2020-04-04\")) %>%\n  \nggplot(aes(x = startDate, y = value, colour = value)) +\n  geom_line(size = 0.75) +\n  scale_color_gradient(low = \"springgreen3\", high = \"firebrick2\") +\n  labs(title = NULL,\n       y = \"Heart rate\",\n       x = NULL) +\n  expand_limits(y = c(50, 200)) + \n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"))\n\n\n# Other types of data from Apple Health\n\ndf_record <-   XML:::xmlAttrsToDataFrame(xml[\"//Record\"])\ndf_activity <- XML:::xmlAttrsToDataFrame(xml[\"//ActivitySummary\"])\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])\ndf_clinical <- XML:::xmlAttrsToDataFrame(xml[\"//ClinicalRecord\"])\ndf_location <- XML:::xmlAttrsToDataFrame(xml[\"//Location\"])\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"highlight-style":"eiffel","toc":true,"output-file":"2020-05-19_heidi-post.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":{"light":"litera"},"title-block-banner":true,"toc-title":"Table of contents","toc-location":"left","comments":{"giscus":{"repo":"mitchhenderson/mitchhenderson.dev","repo-id":"R_kgDOJLIMQQ","category":"Announcements","category-id":"DIC_kwDOJLIMQc4CU9Pb","mapping":"pathname","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":"light"}},"title":"Visualising Apple Health data |<br>Guest post by Heidi Thornton","author":"Heidi Thornton","date":"2020-05-19","coverMeta":"out","keywords":"tech","metaAlignment":"center","slug":"visualising-data-measured-from-activity-watches","description":"Tracking data from your Apple watch doesn't have to stay in an app. This post shows you how it can be exported, manipulated, and visualised using R.","thumbnailImage":"/img/Heart.png","thumbnailImagePosition":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}