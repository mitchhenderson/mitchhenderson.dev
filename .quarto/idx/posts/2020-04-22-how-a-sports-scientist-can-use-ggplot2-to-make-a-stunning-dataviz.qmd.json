{"title":"Making better visualisations using ggplot2 in R","markdown":{"yaml":{"title":"Making better visualisations using ggplot2 in R","author":"Mitch Henderson","date":"2020-04-22","slug":"making-better-visualisations-using-ggplot2-in-R","coverMeta":"out","metaAlignment":"center","thumbnailImage":"/img/ggplot2.png","thumbnailImagePosition":"left","description":"Great visualisations help communicate your message more clearly. This post shows you an example of my process.","knitr":{"opts_chunk":{"dev":"ragg_png"}}},"headingText":"Step 1 \\| Data prep","containsRefs":false,"markdown":"\n\n> \"The ability to take data---to be able to understand it, to process it, to extract value from it, to visualize it, to communicate it---that's going to be a hugely important skill in the next decades, ... because now we really do have essentially free and ubiquitous data. So the complimentary scarce factor is the ability to understand that data and extract value from it.\"\n>\n> `r tufte::quote_footer('--- Hal Varian, The McKinsey Quarterly, Jan 2009')`\n\nGreat results and important messages from sports scientists and S&C coaches are too often lost at the final and most important hurdle of the scientific process: **communication**.\n\nA clear, considered, and engaging visualisation helps by presenting the data in a way that's digestible to **people**, not just machines.\n\nOn the 13th April 2020, I tweeted a thread of visualisations that I'd made recreating the work of [Tom Worville](https://twitter.com/Worville) of [The Athletic](https://theathletic.co.uk/author/tom-worville/).\n\n<blockquote class=\"twitter-tweet\">\n\n<p lang=\"en\" dir=\"ltr\">\n\nInspired by the work of <a href=\"https://twitter.com/Worville?ref_src=twsrc%5Etfw\">@Worville</a> showing <a href=\"https://twitter.com/LFC?ref_src=twsrc%5Etfw\">@LFC</a>'s age profile over the past few seasons, I tried to recreate his charts for some other competition-winning üèÜ teams over the last few years using <a href=\"https://twitter.com/hashtag/ggplot?src=hash&amp;ref_src=twsrc%5Etfw\">#ggplot</a> in <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a>. A thread.<br><br>1/6 <a href=\"https://t.co/F9m4oVbLG0\">pic.twitter.com/F9m4oVbLG0</a>\n\n</p>\n\n--- Mitch Henderson (@mitchhendo_) <a href=\"https://twitter.com/mitchhendo_/status/1249500020002316289?ref_src=twsrc%5Etfw\">April 13, 2020</a>\n\n</blockquote>\n\n```{=html}\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\nThis post will take you through the process of how I generated this one:\n\n![](/img/foxes_peak-years.png)\n\nThe full code will be posted at the end, as throughout the post I'll be going through parts of it bit by bit.\n\nIf you'd prefer to watch me do it, this video shows me going through the whole process:\n\n<br>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VSrGkZgFP1E\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n\n</iframe>\n\n<br>\n\n\n### Collate the data\n\nThe data that we will use needs to be in this format:\n\n```{r}\n#| label = \"data format\",\n#| echo = FALSE,\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE,\n#| paged.print = TRUE\n\nlibrary(tidyverse)\nknitr::kable(read_csv('data_leicester.csv'), format = \"html\", align = \"ccccc\") %>%\n  kableExtra::kable_styling(font_size = 12)\n```\n\n<br>\n\n-   The `percent_involvement` column is a 0 - 1 number representing the percentage of minutes played for the season.\n-   The `dob` column is each players date of birth.\n-   The `arrival_at_team` column is the date the player joined the club.\n-   The `reference_date` column is the date that you want to calculate age and time at the club from. In this circumstance, I've used the date of the last Premier League game of the 2015/16 season.\n\nI found Leicester City's data from 2015/16 at [transfermarkt.com](https://www.transfermarkt.com/).\n\nSave this file as a `.csv` in your working directory.\n\n### Find a logo\n\nFind your team's logo online (preferably high resolution `.png` image with a transparent background), and save it into your working directory. I found this one on [Leicester City's Wikipedia page](https://en.wikipedia.org/wiki/Leicester_City_F.C.).\n\n::: {style=\"width:200px; height:200px\"}\n![](/img/leicester_logo.png){width=\"200\"}\n:::\n\n<br>\n\n# Step 2 \\| Load packages and import data\n\n### R packages\n\nThe below packages need to be loaded at the beginning of your R script. If this is the first time using any of these packages on your computer, make sure you install them first (e.g. `install.packages(\"package_name\")`).\n\nUsing different fonts in R can be tricky, particularly on Windows machines (like I use). If you want to use a non-standard font like I have and you're unfamiliar with the setup, [read this article by June Choe](https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/ \"Setting up and debugging custom fonts\") that walks you through it.\n\nLater in this post I'll be using a font called \"URWGeometricW03-Light\" that I had to download online, you'll need to substitute this in the code to a font available to you for the code to work (or aquire this font).\n\n```{r}\n#| label = \"load packages\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(ggforce)\nlibrary(magick)\nlibrary(scales)\n```\n\n### Add metadata\n\nThis is where we define what will end up being used for our title, subtitle, caption, and logo.\n\n```{r}\n#| label = \"metadata\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n\n# Metadata ---------------------------------------------------------------\n\n# Title, subtitle, and legend\nteam_name <- \"Leicester City\"\nshort_name <- \"Foxes\"\nleague <- \"English Premier League\"\nseason <- \"2015/16\"\n\n# Caption\ndata_source <- \"transfermarkt.com\"\nsocial_media_handle <- \"@mitchhendo_\"\n\n# Name of logo file within working directory\nlogo_file_name <- \"leicester_logo.png\"\n```\n\n### Load data\n\nThis section will read in the data from my file called `leicester_data.csv` in my working directory, and make it an object called `data`. Then we tell R what kind of data certain columns are (number, date, character etc), and calculate a few new columns based on the data within the file.\n\nI've added comments to the code so it's easier to understand what each part is doing. Anything after a `#` is a comment which **isn't** executed as code. Comments are used for explaining your code to others or yourself in the future.\n\n```{r}\n#| label = \"import\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n\n# Data import -------------------------------------------------------------\n\ndata <- read_csv('data_leicester.csv') %>% # Read in this file\n  mutate(\n    dob = dmy(dob),\n    # Recognise this column as a date\n    \n    reference_date = dmy(reference_date),\n    # Recognise this column as a date\n    \n    arrival_at_team = dmy(arrival_at_team),\n    # Recognise this column as a date\n    \n    age = (reference_date - dob) / 365,\n    # Create a new column that calculates each players age at the reference date\n    \n    age_at_arrival = (arrival_at_team - dob) / 365,\n    # Create a new column that calculates each players age at arrival to the club\n    \n    time_with_team = as_factor(ifelse(arrival_at_team < reference_date - 365, \"Years > 1\", \"Years < 1\"))\n    # Create a new column that determines whether a player has been at the club for longer than a year or not\n  )\n```\n\n<br>\n\n# Step 3 \\| Create plot\n\n### Prep\n\nBefore we create the `ggplot` object, we need to define a few things to make the plotting easier.\n\nFirstly, we define what colours we want for the dots and call this object `year_colours` (using hex code to specify colours), and also define a series of numbers that we'll call `index` which will allow us to plot the trailing lines behind the players (showing how long they've been at the club for).\n\n```{r}\n#| label = \"plot metadata\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n# Colours of the dots\nyear_colours <- c(`Years > 1` = \"#25ABF8\", `Years < 1` = \"#CE3A6C\")\n\n# This vector is needed to draw the trailing lines showing how long a player has been at the club\n# Don't change this unless you know what you're doing\nindex <- c(0, 0.25, 0.5, 0.75, 1)\n```\n\n### Plotting\n\nNow the fun begins. Let's start building the plot.\n\nWe'll start by using the `ggplot` function and telling it that the data we're using is from the `data` object we created earlier. The `aes()` function is used to specify what parts of our data are going to be used in the plot, so we say the x-axis will be our `age` column and the y-axis will be our `percent_involvement` column.\n\n```{r}\n#| label = \"plot1\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement))\n```\n\nThis is essentially the canvas that we'll build from.\n\nNext we'll add our dots using the `geom_point()` function. The way the `ggplot` function works is by adding layers (called geoms) to the \"canvas\". We add layers or aspects to the plot by adding them with a `+`.\n\nNote I've added another column from our dataset to specify the colour in the `aes()` function for the `geom_point()` layer **only**. The data specified in the `aes()` function at the top is applied to **all** geoms below unless specified otherwise within the an individual geom. I've also manually adjusted the size of the dots, which is done outside the `aes()`.\n\n```{r}\n#| label = \"plot2\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4)\n```\n\nNext we'll add our title, subtitle, x-axis title, caption, and legend title using the `labs()` function. All of the information for these has been defined in **Step 2** where we added the metadata.\n\nThe `paste0()` function essentially allows us to paste together objects we've defined using code and written character strings to create a character string that dynamically changes based on different inputs (e.g. `paste0(team_name, \" | Squad Age Profile\")` becomes \"Leicester City \\| Squad Age Profile\"). You can use the dynamic titles like I have, or you could simply write what you want each part to say within quotation marks like I did for the x-axis title.\n\n```{r}\n#| label = \"plot3\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name))\n```\n\nNext we'll fix up our y-axis by using the `scale_y_continuous()` function to give it a proper title, use percent scales, and tell it where to break up the axis ticks.\n\n```{r}\n#| label = \"plot4\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1))\n```\n\nThen we set our axis limits using the `expand_limits()`, and x-axis breaks using `scale_x_continuous()`.\n\n```{r}\n#| label = \"plot5\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_x_continuous(breaks = seq(16, 40, 4))\n```\n\nWe can add our colours to the dots that we specified earlier by using `scale_colour_manual()` and specifying the values to be our object `year_colours`.\n\n```{r}\n#| label = \"plot6\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours)\n```\n\nOne of the most fun parts of using `ggplot` in my mind is playing around with the theme. There are a number of [basic themes built into ggplot](https://www.datanovia.com/en/blog/ggplot-themes-gallery/) aswell as some more fun ones that can be added with packages like [hrbrthemes](https://github.com/hrbrmstr/hrbrthemes), [ggtech](https://github.com/ricardo-bion/ggtech) (which has themes to imitate *AirBnb*, *Facebook*, *Google* and *Twitter*'s style), and [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) (which has themes to imitate plots made by *FiveThirtyEight*, *Wall Street Journal*, and *The Economist* among others). The best page I've found for exploring different themes and theme packages is [*Themes to improve your ggplot figures* by rfortherestofus.com](https://rfortherestofus.com/2019/08/themes-to-improve-your-ggplot-figures/). You can also modify themes any way you'd like using the `theme()` function which we'll get to next.\n\nI'll use `theme_minimal()` as a base.\n\n```{r}\n#| label = \"plot7\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal()\n```\n\nYou can adjust any aspect of the theme manually with `theme()`. The flexibility and power of this is almost endless, and far beyond the scope of this post, but carefully look through all the arguments I've written and you'll be able to understand a lot of it.\n\nRemember that you will likely need to change the font (the `family` argument within `theme()`) where mine says `URWGeometricW03-Light` to a font available to you (fonts can be tricky, [this post will help](https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/ \"Setting up and debugging custom fonts\")).\n\nFeel free to play around with these to get a different look or to get a better understanding of what they're doing. For example, you could change the colour of the plot area (i.e. where the data goes) by changing the hex code in `plot.background = element_rect(fill = \"#141622\")`.\n\n```{r}\n#| label = \"plot8\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\nNext we add the player name labels to the plot using `geom_text_repel()` from the `ggrepel` package we loaded earlier. It's a handy function that basically ensures labels don't overlap each other.\n\nThe order in which we add things from here starts to matter now. Like I mentioned earlier, becuase `ggplot`'s are built with layers, you need to think about what order you want them laid. I want the labels to be added on top of the dots, so I'll put this geom right after `geom_point()`.\n\nAgain, in my code below, this geom uses the \"URWGeometricW03-Light\" font I got online. You'll need to download this font or change it to a font available to you.\n\n```{r}\n#| label = \"plot9\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\nThe plot is really starting to look like the finished product now.\n\nWe need to add the trailing white lines with the `geom_link()` function from the `ggforce` package we've loaded. Again, the order is important here, we want the lines to be beneath the dots so we add this geom **before** `geom_point()`.\n\n```{r}\n#| label = \"plot10\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_link(aes(x = age_at_arrival,\n                xend = age,\n                yend = percent_involvement,\n                alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\nNow we need to add the green *Peak Years* area and label. This is done with `annotate()` which manually adds things like shapes, text, or images. We're adding a shape (`rect` for rectangle) and text, so we add 2 `annotate()` geoms before anything else (because we want them to be at the deepest layer), and provide it the coordinates so it knows where to put them.\n\nOnce again, change `family` if you don't have the \"URWGeometricW03-Light\" font.\n\n```{r}\n#| label = \"plot11\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  annotate(\"rect\", \n           xmin = 24,\n           xmax = 29,\n           ymin = -Inf,\n           ymax = 1,\n           alpha = 0.5,\n           fill = \"mediumseagreen\") +\n  annotate(\"text\", \n           x = 26.5, \n           y = 1.05, \n           label = \"Peak Years\", \n           colour = \"mediumseagreen\", \n           alpha = 0.7, \n           family = \"URWGeometricW03-Light\",\n           size = 5) +\n  geom_link(aes(x = age_at_arrival,\n                xend = age,\n                yend = percent_involvement,\n                alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\n<br>\n\n# Step 4 \\| Saving and adding the logo\n\n### Saving the plot\n\nTo save the plot as a high resolution image we can use the `ggsave()` function. Here I save the file with a dynamic name that equates to the current date, underscore, short_name (object we created in Step 2 = \"Foxes\"), underscore, peak-years.png. So for me, today as I write this post, the file would be saved as `2020-04-24_Foxes_peak-years.png`, but that would be different if I was to save it on a different day or with a different `short_name` object.\n\nThe `dpi` argument is *dots per inch* and allows you to set the resolution. Higher is better but also means a larger file size (`dpi = 600` is good).\n\nThe file will be saved into your working directory.\n\n```{r}\n#| label = \"ggsave\",\n#| message = FALSE,\n#| warning = FALSE\n\nggsave(paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), \n       height = 5.75,\n       width = 7.25,\n       dpi = 600)\n```\n\n### Adding the logo\n\nThere's a number of ways to add a logo to a `ggplot` object, but they can be quite complex. The best one I've found is using a custom function that [Thomas Mock](https://twitter.com/thomas_mock) created and posted on [his blog](https://themockup.netlify.app/posts/2019-01-09-add-a-logo-to-your-plot/).\n\nIt reads in the plot as a `.png` image, the logo as another `.png` image, and puts the logo in a corner you specify at a size you specify.\n\nThe only parts of this you **may** want to modify are the sections below `### ONLY MODIFY FROM HERE DOWN`. You can choose which corner you want the logo in, what is the file name you saved the plot image, and the size of the logo (bigger number = smaller logo).\n\n```{r}\n#| label = \"logo function\",\n#| message = FALSE,\n#| warning = FALSE,\n#| eval = FALSE\n\n# Add logo function -------------------------------------------------------\n\nadd_logo <- function(plot_path, logo_path, logo_position, logo_scale = 10){\n  \n  # Requires magick R Package https://github.com/ropensci/magick\n  \n  # Useful error message for logo position\n  if (!logo_position %in% c(\"top right\", \"top left\", \"bottom right\", \"bottom left\")) {\n    stop(\"Error Message: Uh oh! Logo Position not recognized\\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'\")\n  }\n  \n  # read in raw images\n  plot <- magick::image_read(plot_path)\n  logo_raw <- magick::image_read(logo_path)\n  \n  # get dimensions of plot for scaling\n  plot_height <- magick::image_info(plot)$height\n  plot_width <- magick::image_info(plot)$width\n  \n  # default scale to 1/10th width of plot\n  # Can change with logo_scale\n  logo <- magick::image_scale(logo_raw, as.character(plot_width/logo_scale))\n  \n  # Get width of logo\n  logo_width <- magick::image_info(logo)$width\n  logo_height <- magick::image_info(logo)$height\n  \n  # Set position of logo\n  # Position starts at 0,0 at top left\n  # Using 0.01 for 1% - aesthetic padding\n  \n  if (logo_position == \"top right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"top left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"bottom right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = plot_height - logo_height - 0.02 * plot_height\n  } else if (logo_position == \"bottom left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.02 * plot_height\n  }\n  \n  # Compose the actual overlay\n  magick::image_composite(plot, logo, offset = paste0(\"+\", x_pos, \"+\", y_pos))\n  \n}\n\n\n### ONLY MODIFY FROM HERE DOWN\n\n# Choose logo, position, and size (bigger number = smaller logo) ----------\n\nplot_with_logo <- add_logo(\n  plot_path = paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), # url or local file for the plot\n  logo_path = logo_file_name, # url or local file for the logo\n  logo_position = \"top right\", # choose a corner\n  # 'top left', 'top right', 'bottom left' or 'bottom right'\n  logo_scale = 7\n)\n\n# save the image and write to working directory\nmagick::image_write(plot_with_logo, paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"))\n```\n\nThis'll save over the file we created with a new file that's the plot image with the logo added like this:\n\n![](/img/foxes_peak-years.png)\n\nAnd that's it! Let me know if you have any questions or want me to clarify anything.\n\n**Keep up to date with anything new from me on [my Twitter](https://twitter.com/mitchhendo_).**\n\nCheers,\n\nMitch\n\n# **Full code**\n\n```{r}\n#| label = \"full code\",\n#| eval = FALSE,\n#| message = FALSE,\n#| warning = FALSE\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(ggforce)\nlibrary(magick)\nlibrary(scales)\n\n\n# Metadata ---------------------------------------------------------------\n\n# Title, subtitle, and legend\nteam_name <- \"Leicester City\"\nshort_name <- \"Foxes\"\nleague <- \"English Premier League\"\nseason <- \"2015/16\"\n\n# Caption\ndata_source <- \"transfermarkt.com\"\nsocial_media_handle <- \"@mitchhendo_\"\n\n# Name of logo file within working directory\nlogo_file_name <- \"leicester_logo.png\"\n\n\n\n# Data import -------------------------------------------------------------\n\ndata <- read_csv('data_leicester.csv') %>% # Read in this file\n  mutate(\n    dob = dmy(dob),\n    # Recognise this column as a date\n    \n    reference_date = dmy(reference_date),\n    # Recognise this column as a date\n    \n    arrival_at_team = dmy(arrival_at_team),\n    # Recognise this column as a date\n    \n    age = (reference_date - dob) / 365,\n    # Create a new column that calculates each players age at the reference date\n    \n    age_at_arrival = (arrival_at_team - dob) / 365,\n    # Create a new column that calculates each players age at arrival to the club\n    \n    time_with_team = as_factor(ifelse(arrival_at_team < reference_date - 365, \"Years > 1\", \"Years < 1\"))\n    # Create a new column that determines whether a player has been at the club for longer than a year or not\n  )\n\n\n# Visualise ---------------------------------------------------------------\n\n# Colours of the dots\nyear_colours <- c(`Years > 1` = \"#25ABF8\", `Years < 1` = \"#CE3A6C\")\n\n# This vector is needed to draw the trailing lines showing how long a player has been at the club\n# Don't change this unless you know what you're doing\nindex <- c(0, 0.25, 0.5, 0.75, 1)\n\n\n# Construct plot\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  annotate(\"rect\", xmin = 24, xmax = 29, ymin = -Inf, ymax = 1, alpha = 0.5, fill = \"mediumseagreen\") +\n  annotate(\"text\", \n           x = 26.5, \n           y = 1.05, \n           label = \"Peak Years\", \n           colour = \"mediumseagreen\", \n           alpha = 0.7, \n           family = \"URWGeometricW03-Light\",\n           size = 5) +\n  geom_link(aes(x = age_at_arrival, xend = age, yend = percent_involvement, alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_x_continuous(breaks = seq(16, 40, 4)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14)) +\n  ggsave(paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"),  dpi = 600)\n\n\n\n\n\n# Add logo function -------------------------------------------------------\n\nadd_logo <- function(plot_path, logo_path, logo_position, logo_scale = 10){\n  \n  # Requires magick R Package https://github.com/ropensci/magick\n  \n  # Useful error message for logo position\n  if (!logo_position %in% c(\"top right\", \"top left\", \"bottom right\", \"bottom left\")) {\n    stop(\"Error Message: Uh oh! Logo Position not recognized\\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'\")\n  }\n  \n  # read in raw images\n  plot <- magick::image_read(plot_path)\n  logo_raw <- magick::image_read(logo_path)\n  \n  # get dimensions of plot for scaling\n  plot_height <- magick::image_info(plot)$height\n  plot_width <- magick::image_info(plot)$width\n  \n  # default scale to 1/10th width of plot\n  # Can change with logo_scale\n  logo <- magick::image_scale(logo_raw, as.character(plot_width/logo_scale))\n  \n  # Get width of logo\n  logo_width <- magick::image_info(logo)$width\n  logo_height <- magick::image_info(logo)$height\n  \n  # Set position of logo\n  # Position starts at 0,0 at top left\n  # Using 0.01 for 1% - aesthetic padding\n  \n  if (logo_position == \"top right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"top left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"bottom right\") {\n    x_pos = plot_width - logo_width - 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.01 * plot_height\n  } else if (logo_position == \"bottom left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.01 * plot_height\n  }\n  \n  # Compose the actual overlay\n  magick::image_composite(plot, logo, offset = paste0(\"+\", x_pos, \"+\", y_pos))\n  \n}\n\n\n\n# Choose logo, position, and size (bigger number = smaller logo) ----------\n\nplot_with_logo <- add_logo(\n  plot_path = paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), # url or local file for the plot\n  logo_path = logo_file_name, # url or local file for the logo\n  logo_position = \"top right\", # choose a corner\n  # 'top left', 'top right', 'bottom left' or 'bottom right'\n  logo_scale = 7\n)\n\n# save the image and write to working directory\nmagick::image_write(plot_with_logo, paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\")) \n```\n","srcMarkdownNoYaml":"\n\n> \"The ability to take data---to be able to understand it, to process it, to extract value from it, to visualize it, to communicate it---that's going to be a hugely important skill in the next decades, ... because now we really do have essentially free and ubiquitous data. So the complimentary scarce factor is the ability to understand that data and extract value from it.\"\n>\n> `r tufte::quote_footer('--- Hal Varian, The McKinsey Quarterly, Jan 2009')`\n\nGreat results and important messages from sports scientists and S&C coaches are too often lost at the final and most important hurdle of the scientific process: **communication**.\n\nA clear, considered, and engaging visualisation helps by presenting the data in a way that's digestible to **people**, not just machines.\n\nOn the 13th April 2020, I tweeted a thread of visualisations that I'd made recreating the work of [Tom Worville](https://twitter.com/Worville) of [The Athletic](https://theathletic.co.uk/author/tom-worville/).\n\n<blockquote class=\"twitter-tweet\">\n\n<p lang=\"en\" dir=\"ltr\">\n\nInspired by the work of <a href=\"https://twitter.com/Worville?ref_src=twsrc%5Etfw\">@Worville</a> showing <a href=\"https://twitter.com/LFC?ref_src=twsrc%5Etfw\">@LFC</a>'s age profile over the past few seasons, I tried to recreate his charts for some other competition-winning üèÜ teams over the last few years using <a href=\"https://twitter.com/hashtag/ggplot?src=hash&amp;ref_src=twsrc%5Etfw\">#ggplot</a> in <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a>. A thread.<br><br>1/6 <a href=\"https://t.co/F9m4oVbLG0\">pic.twitter.com/F9m4oVbLG0</a>\n\n</p>\n\n--- Mitch Henderson (@mitchhendo_) <a href=\"https://twitter.com/mitchhendo_/status/1249500020002316289?ref_src=twsrc%5Etfw\">April 13, 2020</a>\n\n</blockquote>\n\n```{=html}\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\nThis post will take you through the process of how I generated this one:\n\n![](/img/foxes_peak-years.png)\n\nThe full code will be posted at the end, as throughout the post I'll be going through parts of it bit by bit.\n\nIf you'd prefer to watch me do it, this video shows me going through the whole process:\n\n<br>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VSrGkZgFP1E\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n\n</iframe>\n\n<br>\n\n# Step 1 \\| Data prep\n\n### Collate the data\n\nThe data that we will use needs to be in this format:\n\n```{r}\n#| label = \"data format\",\n#| echo = FALSE,\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE,\n#| paged.print = TRUE\n\nlibrary(tidyverse)\nknitr::kable(read_csv('data_leicester.csv'), format = \"html\", align = \"ccccc\") %>%\n  kableExtra::kable_styling(font_size = 12)\n```\n\n<br>\n\n-   The `percent_involvement` column is a 0 - 1 number representing the percentage of minutes played for the season.\n-   The `dob` column is each players date of birth.\n-   The `arrival_at_team` column is the date the player joined the club.\n-   The `reference_date` column is the date that you want to calculate age and time at the club from. In this circumstance, I've used the date of the last Premier League game of the 2015/16 season.\n\nI found Leicester City's data from 2015/16 at [transfermarkt.com](https://www.transfermarkt.com/).\n\nSave this file as a `.csv` in your working directory.\n\n### Find a logo\n\nFind your team's logo online (preferably high resolution `.png` image with a transparent background), and save it into your working directory. I found this one on [Leicester City's Wikipedia page](https://en.wikipedia.org/wiki/Leicester_City_F.C.).\n\n::: {style=\"width:200px; height:200px\"}\n![](/img/leicester_logo.png){width=\"200\"}\n:::\n\n<br>\n\n# Step 2 \\| Load packages and import data\n\n### R packages\n\nThe below packages need to be loaded at the beginning of your R script. If this is the first time using any of these packages on your computer, make sure you install them first (e.g. `install.packages(\"package_name\")`).\n\nUsing different fonts in R can be tricky, particularly on Windows machines (like I use). If you want to use a non-standard font like I have and you're unfamiliar with the setup, [read this article by June Choe](https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/ \"Setting up and debugging custom fonts\") that walks you through it.\n\nLater in this post I'll be using a font called \"URWGeometricW03-Light\" that I had to download online, you'll need to substitute this in the code to a font available to you for the code to work (or aquire this font).\n\n```{r}\n#| label = \"load packages\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(ggforce)\nlibrary(magick)\nlibrary(scales)\n```\n\n### Add metadata\n\nThis is where we define what will end up being used for our title, subtitle, caption, and logo.\n\n```{r}\n#| label = \"metadata\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n\n# Metadata ---------------------------------------------------------------\n\n# Title, subtitle, and legend\nteam_name <- \"Leicester City\"\nshort_name <- \"Foxes\"\nleague <- \"English Premier League\"\nseason <- \"2015/16\"\n\n# Caption\ndata_source <- \"transfermarkt.com\"\nsocial_media_handle <- \"@mitchhendo_\"\n\n# Name of logo file within working directory\nlogo_file_name <- \"leicester_logo.png\"\n```\n\n### Load data\n\nThis section will read in the data from my file called `leicester_data.csv` in my working directory, and make it an object called `data`. Then we tell R what kind of data certain columns are (number, date, character etc), and calculate a few new columns based on the data within the file.\n\nI've added comments to the code so it's easier to understand what each part is doing. Anything after a `#` is a comment which **isn't** executed as code. Comments are used for explaining your code to others or yourself in the future.\n\n```{r}\n#| label = \"import\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n\n# Data import -------------------------------------------------------------\n\ndata <- read_csv('data_leicester.csv') %>% # Read in this file\n  mutate(\n    dob = dmy(dob),\n    # Recognise this column as a date\n    \n    reference_date = dmy(reference_date),\n    # Recognise this column as a date\n    \n    arrival_at_team = dmy(arrival_at_team),\n    # Recognise this column as a date\n    \n    age = (reference_date - dob) / 365,\n    # Create a new column that calculates each players age at the reference date\n    \n    age_at_arrival = (arrival_at_team - dob) / 365,\n    # Create a new column that calculates each players age at arrival to the club\n    \n    time_with_team = as_factor(ifelse(arrival_at_team < reference_date - 365, \"Years > 1\", \"Years < 1\"))\n    # Create a new column that determines whether a player has been at the club for longer than a year or not\n  )\n```\n\n<br>\n\n# Step 3 \\| Create plot\n\n### Prep\n\nBefore we create the `ggplot` object, we need to define a few things to make the plotting easier.\n\nFirstly, we define what colours we want for the dots and call this object `year_colours` (using hex code to specify colours), and also define a series of numbers that we'll call `index` which will allow us to plot the trailing lines behind the players (showing how long they've been at the club for).\n\n```{r}\n#| label = \"plot metadata\",\n#| echo = TRUE,\n#| message = FALSE,\n#| warning = FALSE\n# Colours of the dots\nyear_colours <- c(`Years > 1` = \"#25ABF8\", `Years < 1` = \"#CE3A6C\")\n\n# This vector is needed to draw the trailing lines showing how long a player has been at the club\n# Don't change this unless you know what you're doing\nindex <- c(0, 0.25, 0.5, 0.75, 1)\n```\n\n### Plotting\n\nNow the fun begins. Let's start building the plot.\n\nWe'll start by using the `ggplot` function and telling it that the data we're using is from the `data` object we created earlier. The `aes()` function is used to specify what parts of our data are going to be used in the plot, so we say the x-axis will be our `age` column and the y-axis will be our `percent_involvement` column.\n\n```{r}\n#| label = \"plot1\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement))\n```\n\nThis is essentially the canvas that we'll build from.\n\nNext we'll add our dots using the `geom_point()` function. The way the `ggplot` function works is by adding layers (called geoms) to the \"canvas\". We add layers or aspects to the plot by adding them with a `+`.\n\nNote I've added another column from our dataset to specify the colour in the `aes()` function for the `geom_point()` layer **only**. The data specified in the `aes()` function at the top is applied to **all** geoms below unless specified otherwise within the an individual geom. I've also manually adjusted the size of the dots, which is done outside the `aes()`.\n\n```{r}\n#| label = \"plot2\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4)\n```\n\nNext we'll add our title, subtitle, x-axis title, caption, and legend title using the `labs()` function. All of the information for these has been defined in **Step 2** where we added the metadata.\n\nThe `paste0()` function essentially allows us to paste together objects we've defined using code and written character strings to create a character string that dynamically changes based on different inputs (e.g. `paste0(team_name, \" | Squad Age Profile\")` becomes \"Leicester City \\| Squad Age Profile\"). You can use the dynamic titles like I have, or you could simply write what you want each part to say within quotation marks like I did for the x-axis title.\n\n```{r}\n#| label = \"plot3\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name))\n```\n\nNext we'll fix up our y-axis by using the `scale_y_continuous()` function to give it a proper title, use percent scales, and tell it where to break up the axis ticks.\n\n```{r}\n#| label = \"plot4\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1))\n```\n\nThen we set our axis limits using the `expand_limits()`, and x-axis breaks using `scale_x_continuous()`.\n\n```{r}\n#| label = \"plot5\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_x_continuous(breaks = seq(16, 40, 4))\n```\n\nWe can add our colours to the dots that we specified earlier by using `scale_colour_manual()` and specifying the values to be our object `year_colours`.\n\n```{r}\n#| label = \"plot6\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours)\n```\n\nOne of the most fun parts of using `ggplot` in my mind is playing around with the theme. There are a number of [basic themes built into ggplot](https://www.datanovia.com/en/blog/ggplot-themes-gallery/) aswell as some more fun ones that can be added with packages like [hrbrthemes](https://github.com/hrbrmstr/hrbrthemes), [ggtech](https://github.com/ricardo-bion/ggtech) (which has themes to imitate *AirBnb*, *Facebook*, *Google* and *Twitter*'s style), and [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) (which has themes to imitate plots made by *FiveThirtyEight*, *Wall Street Journal*, and *The Economist* among others). The best page I've found for exploring different themes and theme packages is [*Themes to improve your ggplot figures* by rfortherestofus.com](https://rfortherestofus.com/2019/08/themes-to-improve-your-ggplot-figures/). You can also modify themes any way you'd like using the `theme()` function which we'll get to next.\n\nI'll use `theme_minimal()` as a base.\n\n```{r}\n#| label = \"plot7\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal()\n```\n\nYou can adjust any aspect of the theme manually with `theme()`. The flexibility and power of this is almost endless, and far beyond the scope of this post, but carefully look through all the arguments I've written and you'll be able to understand a lot of it.\n\nRemember that you will likely need to change the font (the `family` argument within `theme()`) where mine says `URWGeometricW03-Light` to a font available to you (fonts can be tricky, [this post will help](https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/ \"Setting up and debugging custom fonts\")).\n\nFeel free to play around with these to get a different look or to get a better understanding of what they're doing. For example, you could change the colour of the plot area (i.e. where the data goes) by changing the hex code in `plot.background = element_rect(fill = \"#141622\")`.\n\n```{r}\n#| label = \"plot8\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\nNext we add the player name labels to the plot using `geom_text_repel()` from the `ggrepel` package we loaded earlier. It's a handy function that basically ensures labels don't overlap each other.\n\nThe order in which we add things from here starts to matter now. Like I mentioned earlier, becuase `ggplot`'s are built with layers, you need to think about what order you want them laid. I want the labels to be added on top of the dots, so I'll put this geom right after `geom_point()`.\n\nAgain, in my code below, this geom uses the \"URWGeometricW03-Light\" font I got online. You'll need to download this font or change it to a font available to you.\n\n```{r}\n#| label = \"plot9\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\nThe plot is really starting to look like the finished product now.\n\nWe need to add the trailing white lines with the `geom_link()` function from the `ggforce` package we've loaded. Again, the order is important here, we want the lines to be beneath the dots so we add this geom **before** `geom_point()`.\n\n```{r}\n#| label = \"plot10\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  geom_link(aes(x = age_at_arrival,\n                xend = age,\n                yend = percent_involvement,\n                alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\nNow we need to add the green *Peak Years* area and label. This is done with `annotate()` which manually adds things like shapes, text, or images. We're adding a shape (`rect` for rectangle) and text, so we add 2 `annotate()` geoms before anything else (because we want them to be at the deepest layer), and provide it the coordinates so it knows where to put them.\n\nOnce again, change `family` if you don't have the \"URWGeometricW03-Light\" font.\n\n```{r}\n#| label = \"plot11\",\n#| fig.height = 5.75,\n#| fig.width = 7.25,\n#| message = FALSE,\n#| warning = FALSE\n\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  annotate(\"rect\", \n           xmin = 24,\n           xmax = 29,\n           ymin = -Inf,\n           ymax = 1,\n           alpha = 0.5,\n           fill = \"mediumseagreen\") +\n  annotate(\"text\", \n           x = 26.5, \n           y = 1.05, \n           label = \"Peak Years\", \n           colour = \"mediumseagreen\", \n           alpha = 0.7, \n           family = \"URWGeometricW03-Light\",\n           size = 5) +\n  geom_link(aes(x = age_at_arrival,\n                xend = age,\n                yend = percent_involvement,\n                alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14))\n```\n\n<br>\n\n# Step 4 \\| Saving and adding the logo\n\n### Saving the plot\n\nTo save the plot as a high resolution image we can use the `ggsave()` function. Here I save the file with a dynamic name that equates to the current date, underscore, short_name (object we created in Step 2 = \"Foxes\"), underscore, peak-years.png. So for me, today as I write this post, the file would be saved as `2020-04-24_Foxes_peak-years.png`, but that would be different if I was to save it on a different day or with a different `short_name` object.\n\nThe `dpi` argument is *dots per inch* and allows you to set the resolution. Higher is better but also means a larger file size (`dpi = 600` is good).\n\nThe file will be saved into your working directory.\n\n```{r}\n#| label = \"ggsave\",\n#| message = FALSE,\n#| warning = FALSE\n\nggsave(paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), \n       height = 5.75,\n       width = 7.25,\n       dpi = 600)\n```\n\n### Adding the logo\n\nThere's a number of ways to add a logo to a `ggplot` object, but they can be quite complex. The best one I've found is using a custom function that [Thomas Mock](https://twitter.com/thomas_mock) created and posted on [his blog](https://themockup.netlify.app/posts/2019-01-09-add-a-logo-to-your-plot/).\n\nIt reads in the plot as a `.png` image, the logo as another `.png` image, and puts the logo in a corner you specify at a size you specify.\n\nThe only parts of this you **may** want to modify are the sections below `### ONLY MODIFY FROM HERE DOWN`. You can choose which corner you want the logo in, what is the file name you saved the plot image, and the size of the logo (bigger number = smaller logo).\n\n```{r}\n#| label = \"logo function\",\n#| message = FALSE,\n#| warning = FALSE,\n#| eval = FALSE\n\n# Add logo function -------------------------------------------------------\n\nadd_logo <- function(plot_path, logo_path, logo_position, logo_scale = 10){\n  \n  # Requires magick R Package https://github.com/ropensci/magick\n  \n  # Useful error message for logo position\n  if (!logo_position %in% c(\"top right\", \"top left\", \"bottom right\", \"bottom left\")) {\n    stop(\"Error Message: Uh oh! Logo Position not recognized\\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'\")\n  }\n  \n  # read in raw images\n  plot <- magick::image_read(plot_path)\n  logo_raw <- magick::image_read(logo_path)\n  \n  # get dimensions of plot for scaling\n  plot_height <- magick::image_info(plot)$height\n  plot_width <- magick::image_info(plot)$width\n  \n  # default scale to 1/10th width of plot\n  # Can change with logo_scale\n  logo <- magick::image_scale(logo_raw, as.character(plot_width/logo_scale))\n  \n  # Get width of logo\n  logo_width <- magick::image_info(logo)$width\n  logo_height <- magick::image_info(logo)$height\n  \n  # Set position of logo\n  # Position starts at 0,0 at top left\n  # Using 0.01 for 1% - aesthetic padding\n  \n  if (logo_position == \"top right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"top left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"bottom right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = plot_height - logo_height - 0.02 * plot_height\n  } else if (logo_position == \"bottom left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.02 * plot_height\n  }\n  \n  # Compose the actual overlay\n  magick::image_composite(plot, logo, offset = paste0(\"+\", x_pos, \"+\", y_pos))\n  \n}\n\n\n### ONLY MODIFY FROM HERE DOWN\n\n# Choose logo, position, and size (bigger number = smaller logo) ----------\n\nplot_with_logo <- add_logo(\n  plot_path = paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), # url or local file for the plot\n  logo_path = logo_file_name, # url or local file for the logo\n  logo_position = \"top right\", # choose a corner\n  # 'top left', 'top right', 'bottom left' or 'bottom right'\n  logo_scale = 7\n)\n\n# save the image and write to working directory\nmagick::image_write(plot_with_logo, paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"))\n```\n\nThis'll save over the file we created with a new file that's the plot image with the logo added like this:\n\n![](/img/foxes_peak-years.png)\n\nAnd that's it! Let me know if you have any questions or want me to clarify anything.\n\n**Keep up to date with anything new from me on [my Twitter](https://twitter.com/mitchhendo_).**\n\nCheers,\n\nMitch\n\n# **Full code**\n\n```{r}\n#| label = \"full code\",\n#| eval = FALSE,\n#| message = FALSE,\n#| warning = FALSE\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(ggforce)\nlibrary(magick)\nlibrary(scales)\n\n\n# Metadata ---------------------------------------------------------------\n\n# Title, subtitle, and legend\nteam_name <- \"Leicester City\"\nshort_name <- \"Foxes\"\nleague <- \"English Premier League\"\nseason <- \"2015/16\"\n\n# Caption\ndata_source <- \"transfermarkt.com\"\nsocial_media_handle <- \"@mitchhendo_\"\n\n# Name of logo file within working directory\nlogo_file_name <- \"leicester_logo.png\"\n\n\n\n# Data import -------------------------------------------------------------\n\ndata <- read_csv('data_leicester.csv') %>% # Read in this file\n  mutate(\n    dob = dmy(dob),\n    # Recognise this column as a date\n    \n    reference_date = dmy(reference_date),\n    # Recognise this column as a date\n    \n    arrival_at_team = dmy(arrival_at_team),\n    # Recognise this column as a date\n    \n    age = (reference_date - dob) / 365,\n    # Create a new column that calculates each players age at the reference date\n    \n    age_at_arrival = (arrival_at_team - dob) / 365,\n    # Create a new column that calculates each players age at arrival to the club\n    \n    time_with_team = as_factor(ifelse(arrival_at_team < reference_date - 365, \"Years > 1\", \"Years < 1\"))\n    # Create a new column that determines whether a player has been at the club for longer than a year or not\n  )\n\n\n# Visualise ---------------------------------------------------------------\n\n# Colours of the dots\nyear_colours <- c(`Years > 1` = \"#25ABF8\", `Years < 1` = \"#CE3A6C\")\n\n# This vector is needed to draw the trailing lines showing how long a player has been at the club\n# Don't change this unless you know what you're doing\nindex <- c(0, 0.25, 0.5, 0.75, 1)\n\n\n# Construct plot\nggplot(data = data, aes(x = age, y = percent_involvement)) +\n  annotate(\"rect\", xmin = 24, xmax = 29, ymin = -Inf, ymax = 1, alpha = 0.5, fill = \"mediumseagreen\") +\n  annotate(\"text\", \n           x = 26.5, \n           y = 1.05, \n           label = \"Peak Years\", \n           colour = \"mediumseagreen\", \n           alpha = 0.7, \n           family = \"URWGeometricW03-Light\",\n           size = 5) +\n  geom_link(aes(x = age_at_arrival, xend = age, yend = percent_involvement, alpha = stat(index)), \n            colour = \"white\", \n            lineend = \"round\",\n            show.legend = F) +\n  geom_point(aes(colour = time_with_team), size = 4) +\n  geom_text_repel(aes(label = player_name), \n                  size = 3.25, \n                  colour = \"white\", \n                  family = \"URWGeometricW03-Light\") +\n  labs(x = \"Age\",\n       title = paste0(team_name, \" | Squad Age Profile\"), \n       subtitle = paste0(league, \" | Season \", season),\n       caption = paste0(social_media_handle, \" | Data: \", data_source),\n       colour = paste0(\"Time at \", short_name)) +\n  scale_y_continuous(\"Share of minutes played\", \n                     labels = scales::percent_format(accuracy = 1), \n                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +\n  expand_limits(x = c(16, 40), y = c(0, 1)) +\n  scale_x_continuous(breaks = seq(16, 40, 4)) +\n  scale_colour_manual(values = year_colours) +\n  theme_minimal() +\n  theme(legend.position = \"right\", \n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#141622\"),\n        panel.background = element_rect(fill = \"#141622\", \n                                        colour = \"#141622\",\n                                        size = 2, \n                                        linetype = \"solid\"),\n        panel.grid.major = element_line(size = 0.5, \n                                        linetype = 'solid',\n                                        colour = \"gray30\"),\n        axis.title.x = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.title.y = element_text(size = 13, \n                                    face = \"bold\", \n                                    colour = \"white\", \n                                    family = \"Century Gothic\"),\n        axis.text.x = element_text(colour = \"white\"),\n        axis.text.y = element_text(colour = \"white\"),\n        plot.title = element_text(face = \"bold\", \n                                  colour = \"white\", \n                                  size = 14, \n                                  family = \"Century Gothic\"),\n        plot.subtitle = element_text(colour = \"white\", \n                                     family = \"URWGeometricW03-Light\", \n                                     size = 10),\n        plot.caption = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 10),\n        plot.caption.position = \"plot\",\n        legend.title = element_text(colour = \"white\", \n                                    family = \"URWGeometricW03-Light\", \n                                    size = 14),\n        legend.text = element_text(colour = \"white\", \n                                   family = \"URWGeometricW03-Light\", \n                                   size = 14)) +\n  ggsave(paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"),  dpi = 600)\n\n\n\n\n\n# Add logo function -------------------------------------------------------\n\nadd_logo <- function(plot_path, logo_path, logo_position, logo_scale = 10){\n  \n  # Requires magick R Package https://github.com/ropensci/magick\n  \n  # Useful error message for logo position\n  if (!logo_position %in% c(\"top right\", \"top left\", \"bottom right\", \"bottom left\")) {\n    stop(\"Error Message: Uh oh! Logo Position not recognized\\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'\")\n  }\n  \n  # read in raw images\n  plot <- magick::image_read(plot_path)\n  logo_raw <- magick::image_read(logo_path)\n  \n  # get dimensions of plot for scaling\n  plot_height <- magick::image_info(plot)$height\n  plot_width <- magick::image_info(plot)$width\n  \n  # default scale to 1/10th width of plot\n  # Can change with logo_scale\n  logo <- magick::image_scale(logo_raw, as.character(plot_width/logo_scale))\n  \n  # Get width of logo\n  logo_width <- magick::image_info(logo)$width\n  logo_height <- magick::image_info(logo)$height\n  \n  # Set position of logo\n  # Position starts at 0,0 at top left\n  # Using 0.01 for 1% - aesthetic padding\n  \n  if (logo_position == \"top right\") {\n    x_pos = plot_width - logo_width - 0.02 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"top left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = 0.01 * plot_height\n  } else if (logo_position == \"bottom right\") {\n    x_pos = plot_width - logo_width - 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.01 * plot_height\n  } else if (logo_position == \"bottom left\") {\n    x_pos = 0.01 * plot_width\n    y_pos = plot_height - logo_height - 0.01 * plot_height\n  }\n  \n  # Compose the actual overlay\n  magick::image_composite(plot, logo, offset = paste0(\"+\", x_pos, \"+\", y_pos))\n  \n}\n\n\n\n# Choose logo, position, and size (bigger number = smaller logo) ----------\n\nplot_with_logo <- add_logo(\n  plot_path = paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\"), # url or local file for the plot\n  logo_path = logo_file_name, # url or local file for the logo\n  logo_position = \"top right\", # choose a corner\n  # 'top left', 'top right', 'bottom left' or 'bottom right'\n  logo_scale = 7\n)\n\n# save the image and write to working directory\nmagick::image_write(plot_with_logo, paste0(Sys.Date(), \"_\", short_name, \"_peak-years.png\")) \n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"highlight-style":"eiffel","toc":true,"output-file":"2020-04-22-how-a-sports-scientist-can-use-ggplot2-to-make-a-stunning-dataviz.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":{"light":"litera"},"title-block-banner":true,"toc-title":"Table of contents","toc-location":"left","comments":{"giscus":{"repo":"mitchhenderson/mitchhenderson.dev","repo-id":"R_kgDOJLIMQQ","category":"Announcements","category-id":"DIC_kwDOJLIMQc4CU9Pb","mapping":"pathname","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":"light"}},"title":"Making better visualisations using ggplot2 in R","author":"Mitch Henderson","date":"2020-04-22","slug":"making-better-visualisations-using-ggplot2-in-R","coverMeta":"out","metaAlignment":"center","thumbnailImage":"/img/ggplot2.png","thumbnailImagePosition":"left","description":"Great visualisations help communicate your message more clearly. This post shows you an example of my process.","knitr":{"opts_chunk":{"dev":"ragg_png"}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}