---
title: "How many games can we expect players to be available for as they age?"
description: |
  Description here
author: Mitch Henderson
date: 2025-03-29
thumbnailImage: /img/nrl_finals_probs.png
draft: true
format: 
  html: 
    code-fold: true
    code-tools: true
    html-table-processing: none
knitr:
    opts_chunk: 
      dev: "ragg_png"
---

```{r}
library(tidyverse)
library(brms)
library(tidybayes) # For post-processing and visualization
library(patchwork) # For combining plots
```

```{r}
data <- read_csv("posts/_2025-03-29-how-many-games-can-we-expect-players-to-be-available-for-as-they-age/nrl_availability_and_ages_2014-2024.csv")
```

```{r}
names_lookup <- data |>
  count(playerId, fullName, sort = T)
```

```{r}
# --- Final Preparation ---
player_data <- data |>
  # Rename age column for easier use in formulas
  rename(age = age_at_start_of_year) |>
  # Create a factor variable for player ID (essential for random effects later)
  # Convert playerId to character first in case it's read as numeric, 
  # then factor to ensure levels are treated correctly.
  mutate(player_id_factor = factor(as.character(playerId))) |>
  # Select the core columns needed for modeling + IDs + raw counts if needed
  select(
    playerId, player_id_factor, season, age, 
    matches_played, team_number_of_matches, 
    availability_perc, availability_adjusted 
  )

# --- Quick Checks ---
# Check the structure again
glimpse(player_data)

# Verify the range of the adjusted availability (should be > 0 and < 1)
summary(player_data$availability_adjusted)

# Check number of unique players
n_distinct(player_data$player_id_factor) 

# Check age range
summary(player_data$age)
```


```{r}
# --- Fit Model 4: Hierarchical One-Inflated Beta on Filtered Data ---

# Use the ORIGINAL availability_perc column from the filtered data
# Include varying precision phi ~ s(age)

formula_m4_oib_filt <- bf(
  availability_perc ~ s(age) + (1 | player_id_factor), # Formula for mu
  phi ~ s(age),                                        # Formula for phi
  coi ~ 1,                                              # Formula for one-inflation
  zoi ~ 1 # Still need zoi for the family, but expect it near zero
)

# Priors - reuse m3_zoib_corrected priors, maybe adjust coi prior if needed
priors_m4_oib_filt <- c(
  prior(normal(1, 1.5), class = Intercept),              
  prior(exponential(1), class = sds),                  
  prior(normal(2, 1.5), class = Intercept, dpar = phi), 
  prior(exponential(1), class = sds, dpar = phi),      
  prior(exponential(1), class = sd),                   
  prior(normal(-5, 1.5), class = Intercept, dpar = zoi), # Expecting near zero
  # Let's try a slightly more positive prior for coi given it's filtered data
  prior(normal(1, 1.5), class = Intercept, dpar = coi)  
)

# Fit Model 4
set.seed(2534) 
m4_hier_oib_100 <- brm(
  formula = formula_m4_oib_filt,
  data = player_data,       # Use FILTERED data
  family = zero_one_inflated_beta(), # Use ZOIB family
  prior = priors_m4_oib_filt,
  iter = 3000, warmup = 1500, chains = 4, cores = 4,       
  control = list(adapt_delta = 0.99, max_treedepth=12), 
  backend = "cmdstanr", 
  file = "m4_hier_oib_100" 
)

# --- Check Model 4 Convergence and Diagnostics ---
summary(m4_hier_oib_100)
plot(m4_hier_oib_100)

# *** Check the MOST IMPORTANT plot: pp_check for Model 4 ***
pp_check(m4_hier_oib_100, ndraws = 100)
pp_check(m4_hier_oib_100, type = "error_hist", ndraws = 10) # Distribution of residuals
```

```{r}
# --- Visualize the Estimated Age Curve for 0 < y < 1 ---

# Use the same age sequence
age_seq <- tibble(age = seq(min(player_data$age), max(player_data$age), length.out = 100))

# Get posterior predictions for the MEAN of the Beta component (mu)
# We specify dpar="mu" to get this specific parameter on the response scale
pred_m4_mu <- age_seq %>%
  add_epred_draws(m4_hier_oib_100, dpar = "mu", re_formula = NA) 

# Calculate summary statistics 
pred_summary_m4_mu <- pred_m4_mu %>%
  group_by(age) %>%
  mean_qi(.epred) 


# Plot the mu curve
plot_m4_mu <- ggplot(pred_summary_m4_mu, aes(x = age)) +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3, fill = "lightgreen") +
  geom_line(aes(y = .epred), color = "darkgreen", linewidth = 1) +
  # Optional: Add filtered data points (excluding the 1s)
  # geom_point(data = player_data %>% filter(availability_perc < 1), 
  #            aes(x = age, y = availability_perc), 
  #            alpha = 0.05, size = 0.5, color = "grey50") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Estimated Mean Availability (when < 100%) vs. Age",
    subtitle = "From Hierarchical OIB model (m4_hier_oib_filt) on filtered data",
    x = "Player Age at Start of Season",
    y = "Estimated Mean Availability % (mu)"
  ) +
  theme_minimal()

print(plot_m4_mu)

# --- Visualize other components if interested ---
# Example: Probability of achieving 100% availability (coi)
# Note: coi was intercept-only, but we could have modelled it with s(age) too
# pred_m4_coi <- age_seq %>%
#   add_epred_draws(m4_hier_oib_filt, dpar = "coi") %>%
#   group_by(age) %>%
#   mean_qi(.epred) 
# ggplot(pred_m4_coi, aes(x=age, y=.epred)) + geom_line() + ...

# Example: Precision (phi) vs age
# pred_m4_phi <- age_seq %>%
#   add_epred_draws(m4_hier_oib_filt, dpar = "phi") %>%
#   group_by(age) %>%
#   mean_qi(.epred) 
# ggplot(pred_m4_phi, aes(x=age, y=.epred)) + geom_line() + ... 
```

```{r}
# Extract player random effects (deviations from the mean intercept on logit scale)
player_effects <- ranef(m4_hier_oib_100)$player_id_factor %>%
  as_tibble(rownames = "player_id_str") %>%
  select(player_id_str, player_intercept_deviation = Estimate.Intercept)

# Convert player_id back to numeric if needed for joining
player_effects <- player_effects %>%
  mutate(playerId = as.numeric(player_id_str))

# Optional: Add credible intervals if desired
player_effects_ci <- ranef(m4_hier_oib_100, summary=TRUE, robust=TRUE, probs=c(0.05, 0.95))$player_id_factor %>%
  as_tibble(rownames = "player_id_str") |>
  mutate(playerId = as.numeric(player_id_str))

# Join with some player info (like name if you have it, or just ID)
# To see which players deviate most
player_summary <- player_data %>%
  group_by(playerId) %>%
  summarise(
    n_seasons = n(),
    mean_age = mean(age),
    mean_avail_orig = mean(availability_perc) 
  ) %>%
  left_join(player_effects_ci, by = "playerId") %>%
  arrange(desc(Estimate.Intercept)) |> # Sort by effect size
  left_join(names_lookup, by = join_by(playerId))

# --- Identify Outliers ---
# Most "durable" (controlling for age) - highest positive deviations
print("Top Durable Players (relative to age expectation):")
print(head(player_summary, 10))

# Most "injury-prone" / less available (controlling for age) - highest negative deviations
print("Top Less Available Players (relative to age expectation):")
print(tail(player_summary, 10))

# --- Visualize specific players ---
# Example: Plot observed data + model fit for a few players of interest
players_of_interest_ids <- c( # Replace with actual playerIds 
  500121, # T Moga
  501451, # J Tevaga
  500973, # J Papalii
  500845, # V Holmes
  501505, # T Trbo
  500024 # DCE
) 

# Get fitted values for these players
fitted_players <- player_data %>%
  filter(playerId %in% players_of_interest_ids) %>%
  left_join(names_lookup, by = join_by(playerId)) |>
  add_fitted_draws(m4_hier_oib_100) %>% # fitted includes random effects
  group_by(playerId, fullName, age) %>%
  mean_qi(.value)

ggplot(player_data %>% filter(playerId %in% players_of_interest_ids) |> left_join(names_lookup, by = join_by(playerId)), 
       aes(x = age, y = availability_perc)) +
  geom_ribbon(data = fitted_players, aes(y = .value, ymin = .lower, ymax = .upper, fill = factor(fullName)), alpha = 0.3) +
  geom_ribbon(data = pred_summary_m4_mu, aes(y = .epred, ymin = .lower, ymax = .upper), alpha = 0.1) +
  geom_line(data = fitted_players, aes(y = .value, color = factor(fullName)), size = 1) +
  geom_point(aes(color = factor(fullName)), size = 2) +
  geom_line(data = pred_summary_m4_mu, aes(x = age, y = .epred), color = "black", linetype = "dashed", inherit.aes = FALSE) + # Add population average mu
  scale_y_continuous(labels = scales::percent_format()) +
  facet_wrap(~fullName) + # Separate plot for each player
  labs(
    title = "Individual Player Availability vs. Age (Selected Players)",
    subtitle = "Points: Observed, Lines: Model Fit (inc. random effect), Dashed: Pop. Average (mu)",
    x = "Age", y = "Availability %", color = "Player ID"
  ) +
  theme_minimal() + 
  theme(legend.position = "none") 
```


```{r}
# Get posterior predictions for the OVERALL expected value, averaging over players
pred_m4_overall_avg <- age_seq %>%
  add_epred_draws(m4_hier_oib_100, re_formula = NA) # NO dpar argument!

# Calculate summary statistics 
pred_summary_m4_overall_avg <- pred_m4_overall_avg %>%
  group_by(age) %>%
  mean_qi(.epred) 

# Plot the overall average curve (can overlay on the mu plot or plot separately)
plot_m4_overall_avg <- ggplot(pred_summary_m4_overall_avg, aes(x = age)) +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3, fill = "orange") +
  geom_line(aes(y = .epred), color = "darkorange", linewidth = 1) +
  # Optionally add the mu curve for comparison
  geom_line(data = pred_summary_m4_mu, aes(y = .epred), color = "darkgreen", linetype="dashed") + 
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Estimated Overall Average Availability vs. Age",
    subtitle = "From Hierarchical OIB model (m4) on filtered data. Combines mu and coi.",
    x = "Player Age at Start of Season",
    y = "Overall Expected Availability %"
  ) +
  theme_minimal()

print(plot_m4_overall_avg)
```

```{r}
# Get posterior PREDICTIVE draws for an average player
pred_draws_m4_avg <- age_seq %>%
  add_predicted_draws(m4_hier_oib_100, re_formula = NA, ndraws = 1000) # ndraws= # simulations per age

# Calculate summary statistics (e.g., median and 95% prediction interval)
pred_interval_m4_avg <- pred_draws_m4_avg %>%
  group_by(age) %>%
  median_qi(.prediction) # median_qi gives median and quantile intervals

# Plot the prediction interval for the average player
plot_m4_pred_avg <- ggplot(pred_interval_m4_avg, aes(x = age)) +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3, fill = "purple") +
  geom_line(aes(y = .prediction), color = "darkmagenta", linewidth = 1) +
  # Overlay the average expectation line for context
  geom_line(data = pred_summary_m4_overall_avg, aes(y = .epred), color = "darkorange", linetype="dashed") +
  scale_y_continuous(labels = scales::percent_format(), limits=c(0,1)) +
  labs(
    title = "Posterior Predictive Interval (Median & 95% PI) for Average Player",
    subtitle = "Purple: Prediction Interval. Orange Dashed: Mean Expectation E[Y].",
    x = "Player Age at Start of Season",
    y = "Predicted Availability %"
  ) +
  theme_minimal()

print(plot_m4_pred_avg)
```

```{r}
# Example for one specific player (replace playerId_X and factor_level_Y)
player_id_to_predict = 500080 # Example: Daly Cherry-Evans
player_factor_level = factor(as.character(player_id_to_predict), levels = levels(player_data$player_id_factor))

# Create prediction data grid for this player
player_pred_grid <- age_seq %>% 
   mutate(player_id_factor = player_factor_level) # Add the correct factor level

# Get predictive draws for this specific player
pred_draws_m4_specific <- player_pred_grid %>%
    add_predicted_draws(m4_hier_oib_100, ndraws = 1000, allow_new_levels = T) 
    
# Calculate interval
pred_interval_m4_specific <- pred_draws_m4_specific %>%
  group_by(age) %>%
  median_qi(.prediction)

# Plot (similar ggplot code, using pred_interval_m4_specific)
ggplot(pred_interval_m4_specific, aes(x = age)) +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3, fill = "purple") +
  geom_line(aes(y = .prediction), color = "darkmagenta", linewidth = 1) +
  # Overlay the average expectation line for context
  geom_line(data = pred_summary_m4_overall_avg, aes(y = .epred), color = "darkorange", linetype="dashed") +
  scale_y_continuous(labels = scales::percent_format(), limits=c(0,1)) +
  labs(
    title = "Posterior Predictive Interval (Median & 95% PI) for DCE",
    subtitle = "Purple: Prediction Interval. Orange Dashed: Mean Expectation E[Y].",
    x = "Player Age at Start of Season",
    y = "Predicted Availability %"
  ) +
  theme_minimal()
```

```{r}
# --- Calculate Overall Expected Availability E[Y] Manually ---

# 1. Get draws for mu (probability scale) vs age
mu_draws <- age_seq %>%
  add_linpred_draws(m4b_hier_oib_filt_coiage, dpar = "mu", re_formula = NA) %>% 
  mutate(mu_prob = plogis(.linpred)) # Inverse logit

# 2. Get draws for coi (probability scale) - intercept only model
coi_draws <- posterior_samples(m4b_hier_oib_filt_coiage, pars = "b_coi_Intercept") %>%
  mutate(coi_prob = plogis(b_coi_Intercept),
         .draw = 1:n()) # Add a draw index

# 3. Get draws for zoi (probability scale) - intercept only model
zoi_draws <- posterior_samples(m4b_hier_oib_filt_coiage, pars = "b_zoi_Intercept") %>%
  mutate(zoi_prob = plogis(b_zoi_Intercept),
         .draw = 1:n()) # Add a draw index

# 4. Combine draws and calculate E[Y]
# Join mu draws with coi and zoi draws based on the .draw index
combined_draws_for_EY <- mu_draws %>%
  select(age, .draw, mu_prob) %>%
  inner_join(coi_draws %>% select(.draw, coi_prob), by = ".draw") %>%
  inner_join(zoi_draws %>% select(.draw, zoi_prob), by = ".draw") %>%
  # Calculate the overall expectation for each draw
  mutate(EY = (1 - zoi_prob) * (coi_prob * 1 + (1 - coi_prob) * mu_prob))

# 5. Summarize the calculated E[Y]
pred_summary_m4_EY_manual <- combined_draws_for_EY %>%
  group_by(age) %>%
  mean_qi(EY) # Summarize the manually calculated expectation

# --- Plot the Comparison Correctly ---

# Now plot the manually calculated E[Y] (Orange) vs Mu (Green Dashed)
plot_m4_corrected_compare <- ggplot(pred_summary_m4_EY_manual, aes(x = age)) + 
  # Overall Expectation E[Y] - Manually Calculated
  geom_ribbon(aes(y = EY, ymin = .lower, ymax = .upper), alpha = 0.3, fill = "orange") +
  geom_line(aes(y = EY), color = "darkorange", linewidth = 1) + 
  # Mu (Mean when < 100%) - from previous correct calculation
  geom_ribbon(data = pred_summary_m4_mu, aes(x = age, y = .epred, ymin = .lower, ymax = .upper), alpha = 0.15, fill = "lightgreen", inherit.aes=FALSE) + # Need inherit.aes=FALSE here
  geom_line(data = pred_summary_m4_mu, aes(x=age, y = .epred), color = "darkgreen", linetype="dashed", linewidth = 1) + # Add x aesthetic here too
  scale_y_continuous(labels = scales::percent_format(), limits=c(0,NA)) +
  labs(
    title = "Estimated Average Availability vs. Age (Corrected)",
    subtitle = "Orange: Overall Expectation E[Y] (manual calc). Green Dashed: Mean when < 100% (mu).",
    x = "Player Age at Start of Season",
    y = "Expected Availability %"
  ) +
  theme_minimal()

print(plot_m4_corrected_compare)

# Get draws for coi (probability scale) vs age from Model 4b
coi_draws_4b <- age_seq %>%
  add_linpred_draws(m4b_hier_oib_filt_coiage, dpar = "coi", re_formula = NA) %>% 
  mutate(coi_prob = plogis(.linpred)) # Inverse logit

# Summarize coi_prob
pred_summary_m4b_coi <- coi_draws_4b %>%
  group_by(age) %>%
  mean_qi(coi_prob)

# Plot coi_prob curve
plot_m4b_coi <- ggplot(pred_summary_m4b_coi, aes(x = age)) +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.3, fill = "red") +
  geom_line(aes(y = coi_prob), color = "darkred", linewidth = 1) + 
  scale_y_continuous(labels = scales::percent_format(), limits=c(0,1)) +
  labs(
    title = "Estimated Probability of 100% Availability (coi) vs. Age",
    subtitle = "From Hierarchical OIB model (m4b: coi ~ s(age)) on filtered data",
    x = "Player Age at Start of Season",
    y = "Probability Pr(Y=1 | Y > 0)"
  ) +
  theme_minimal()

print(plot_m4b_coi)
```