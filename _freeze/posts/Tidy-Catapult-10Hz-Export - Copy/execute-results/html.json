{
  "hash": "c76a6e604bb270e6462bcfb26893af5f",
  "result": {
    "markdown": "---\ntitle: How to tidy Catapult 10Hz export data\nauthor: Mitch Henderson\ndate: '2020-04-05'\ncategories:\n  - Data science\n  - Sports science\ntags:\n  - GPS\n  - R\ncoverImage: /img/catapult_cover.png\ncoverMeta: out\nmetaAlignment: center\nthumbnailImage: /img/catapult_square.jpg\nthumbnailImagePosition: left\n---\n\n\nThe export format of Catapult's 10Hz GPS data isn't ideal for analysis. This post shows you how to tidy it using R.\n\n<!--more-->\n\n# YouTube tutorial\n\nYou can see me going through all the steps outlined here in this video with some dummy data:\n\n\n{{< youtube N0DCRqqSKPw >}}\n\n\n\n# Tidy data\n\nIt's claimed that \\~80% of data analysis is on the process of cleaning and preparing the data [(1)](https://onlinelibrary.wiley.com/doi/book/10.1002/0471448354). In 2014, [Hadley Wickham](https://twitter.com/hadleywickham) coined the term [tidy data](https://vita.had.co.nz/papers/tidy-data.pdf) to define a dataset structured to facilitate analysis. In the [R for Data Science book's section on tidy data](https://r4ds.had.co.nz/tidy-data.html), for a dataset to be *tidy* it has to follow these 3 interrelated rules:\n\n1.  Each variable must have its own column.\n2.  Each observation must have its own row.\n3.  Each value must have it's own cell.\n\n![](/img/tidy_data.png) *Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Image from [R for Data Science](https://r4ds.had.co.nz/index.html) by Hadley Wickham & Garrett Grolemund.*\n\n# Catapult data\n\nWhen you export 10Hz GPS data from Catapult's Openfield software, the `.csv` file produced from each unit looks like this:\n\n![](/img/untidy.png)\n\n![](/img/batman_facepalm.gif)\n\nIt isn't great because:\n\n1.  Each unit has produced it's own `.csv` file, meaning to do any analysis using all players' data we need to find a way to combine the files.\n2.  There are 8 rows of metadata above the actual data we're primarily interested in, preventing us from combining in it's current format.\n\nWithout combining all players' data into one *tidy* table or \"*dataframe*\", we can't explore the data using the common tools like a PivotTable on Microsoft Excel or the `dplyr` R package.\n\n# Solution\n\nThankfully for us, we don't need to manually go through each file, deleting the top 8 rows, creating new columns for the metadata like player name and match, and then copy pasting them all into the one file. The `tidyverse` suite of R packages can help us to largely automate these manual tasks!\n\n![](/img/batman_thinking.gif)\n\nI'll explain how to do it here (and provide you with the R code), and a working example is in [the YouTube video above](https://www.youtube.com/watch?v=N0DCRqqSKPw&t=11s).\n\nThis process will:\n\n1.  Pull in each `.csv` file's data within the folder you've referenced with the `folder_name` variable (assuming that folder is within your working directory).\n2.  Remove the 8 rows of metadata from the top of each file.\n3.  Create new columns for player name and activity derived from the `.csv`'s file name generated by Openfield, and a new column for the `folder_name` variable derived from the R code you entered.\n4.  Combine all files into one *dataframe*.\n5.  Export this dataframe into a new `.csv` called \"`folder_name`\\_tidy.csv\" in your working directory. Where the `folder_name` part of the new file name is what you entered in the code (e.g. the name of my file would be \"Round 1_tidy.csv\").\n\n![](/img/batcomputer.gif)\n\n## Step 1\n\nCreate a folder that will contain all your folders of Openfield 10Hz exports. Name this anything you like.\n\nThis folder needs to become your working directory when you run the code. If you aren't familiar with a working directory, it is just a file path on your computer that sets the default location of any files you read into R, or save out of R.\n\nIn my code below I've manually set the working directory to a fake folder named \"folder_containing_folders_of_csv_files\". This is actually poor practice, because no one else will have the same file system as me, but I've done it this way so it's clearer to those new to R how to manually set your working directory with the `setwd()` function.\n\n**You need to change the file path in the code to one that navigates the file path on your computer to this parent folder**. In the example I go through in [the video above](https://www.youtube.com/watch?v=N0DCRqqSKPw&lc=UgxCPbRiX_kum66VP394AaABAg), you can see I make my working directory \"Desktop/Season 2020\" and within that parent folder I have \"Round 1\" containing the actual files.\n\n## Step 2\n\nExport the files from Openfield **without changing their filename** and save them in a folder with an appropriate name **that has 2 parts to it separated by a blank space**. A good example is \"Round 1\" or \"vs Bulldogs\" or \"Week 2\" (these are the examples I've used in the code below).\n\nThe name is important as the code is looking for a 2-part name separated by a space to become a column in the final output.\n\nThis folder of `.csv` exports needs to be placed within the parent folder created in Step 1.\n\n## Step 3\n\nMake sure you have [R](https://cran.r-project.org/) and [RStudio](https://rstudio.com/products/rstudio/download/) downloaded and installed on your machine (both free!).\n\nOpen RStudio, copy and paste the code below into a script (you can create a new R script by clicking the symbol directly under 'File' on the top-left of the window, and selecting 'R Script').\n\nSave the file as a `.R` file with an appropriate name (e.g. \"tidy_catapult_data.R\").\n\n    # Script to combine and tidy multiple Catapult Openfield 10Hz export .csv files by Mitch Henderson\n    # www.mitchhenderson.org/2020/04/how-to-tidy-catapult-10hz-export-data/\n\n    library(tidyverse)\n    library(zoo)\n    library(magrittr)\n\n    # Set working directory (ideally you will learn project based workflow in RStudio and this part becomes redundant)\n\n    setwd(\"C:/Users/Mitch.Henderson/parent_folder_containing_folders_of_csv_files\")\n\n    # Add metadata for these files that will become a column in the final output. \n    # This must exactly match the folder name containing the .csv files and MUST be 2 words separated by a space (e.g. \"Round 1\" or \"vs Bulldogs\" or \"Week 2\").\n\n    folder_name <- \"Round 1\" \n\n    # This function will read in multiple .csv files, create a column with the file name, and parse it into it's relevant components.\n\n    read_plus <- function(flnm) {\n      read_csv(flnm, skip = 8)[, c(\n        \"Timestamp\",\n        \"Latitude\",\n        \"Longitude\",\n        \"Seconds\",\n        \"Velocity\",\n        \"Acceleration\",\n        \"Odometer\",\n        \"Heart Rate\",\n        \"Player Load\",\n        \"Positional Quality (%)\",\n        \"HDOP\",\n        \"#Sats\"\n      )] %>%\n        mutate(Filename = flnm,\n               Folder = str_split(Filename, \"/\")[[1]][2],\n               Activity_interim = str_split(Filename, \"/\")[[1]][3],\n               Activity_interim2 = str_split(Activity_interim, \" for \")[[1]][1],\n               Activity = str_split(Activity_interim2, \" Export\")[[1]][1],\n               Player_interim = str_split(Activity_interim, \" for \")[[1]][2],\n               Player = paste0(str_split(Player_interim, \" \")[[1]][1], \" \", str_split(Player_interim, \" \")[[1]][2])\n        ) %>%\n        select(-Filename, -Activity_interim, -Activity_interim2, -Player_interim)\n    }\n\n    # Import data from files contained within the folder specified by `folder_name` above (folder must be in working directory)\n\n    combine_and_tidy <-\n      list.files(path = paste0(\"./\", folder_name, \"/\"),\n                 pattern = \"*.csv\", \n                 full.names = T) %>%\n      map_df(~read_plus(.))\n\n    # Output csv into working directory (folder containing the folders of csv files)\n\n    write.csv(combine_and_tidy, file = paste0(folder_name, \"_tidy.csv\"), row.names = F)\n\n## Step 4\n\nChange the code's working directory to navigate to your parent folder created in Step 1; and change the `folder_name` variable to the exact folder name (in brackets/parentheses like is currently in the code) containing the `.csv` files you would like to combine and tidy.\n\nIn my code, the folder called \"Round 1\" has my `.csv` files in it.\n\nLike I mentioned in Step 2, for the code to work the folder name containing the files **MUST** be 2 parts separated by a space.\n\nHighlight the entire code and press Ctrl + Enter (Cmd + Return on a Mac). This will run the code and produce the output `.csv` file in your working directory.\n\n# Done!\n\nNow the data is in *tidy* format and is easy to manipulate and analyse!\n\n![](/img/tidy_gps.png)\n\n![](/img/batman_thumbsup.gif)\n\nLet me know if this post has helped you or if there's anything else you're interested in learning that I can help with. I'm keen to hear!\n\n**Keep up to date with anything new from me on [my Twitter](https://twitter.com/mitchhendo_).**\n\nCheers,\n\nMitch\n\n*Cover image and thumbnail from [catapultsports.com](www.catapultsports.com).*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}